name: CI Tests

on: [push, pull_request]

jobs:
  server-tests:
    runs-on: ubuntu-22.04
    name: Run Server-Side Tests

    env:
      SITE_NAME: test_site
      ADMIN_PASSWORD: admin
      ERPNEXT_TAG: v15.65.4 # Убедитесь, что тег актуален
      DB_ROOT_PASSWORD: root
      CUSTOM_APP_NAME: ferum_customs

    steps:
      # 1. Получаем код
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Кэшируем зависимости для ускорения последующих сборок
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/*requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # 3. Создаём .env для docker-compose
      - name: Generate .env file
        run: |
          {
            echo "SITE_NAME=${{ env.SITE_NAME }}"
            echo "ADMIN_PASSWORD=${{ env.ADMIN_PASSWORD }}"
            echo "ERPNEXT_TAG=${{ env.ERPNEXT_TAG }}"
            echo "DB_ROOT_PASSWORD=${{ env.DB_ROOT_PASSWORD }}"
          } > .env

      # 4. Поднимаем сервисы в фоновом режиме для настройки
      - name: Start Background Services
        run: docker compose -f docker-compose.test.yml up -d

      # 5. Устанавливаем приложения и настраиваем окружение
      - name: Install Apps and Dependencies
        run: |
          # Исправляем права на рабочую директорию и bench (от root)
          docker compose exec -T --user root frappe \
            chown -R frappe:frappe /home/frappe/frappe-bench /workspace

          # Выполняем установку и настройку (от frappe)
          docker compose exec -T frappe bash -eo pipefail -c '
            set -e
            
            # Добавляем /workspace в safe.directory для Git
            git config --global --add safe.directory /workspace
            
            source /workspace/.env
            
            # Устанавливаем ERPNext
            if [ ! -d apps/erpnext ]; then
                bench get-app --branch "${ERPNEXT_TAG}" --depth 1 erpnext https://github.com/frappe/erpnext
            fi
            
            # Устанавливаем кастомное приложение, используя правильный синтаксис для локального пути
            bench get-app --branch main "${CUSTOM_APP_NAME}" file:///workspace
            
            bench setup requirements --node --python
            
            bench new-site --db-root-password "$DB_ROOT_PASSWORD" --admin-password "$ADMIN_PASSWORD" "$SITE_NAME"
            bench --site "$SITE_NAME" install-app erpnext
            bench --site "$SITE_NAME" install-app "${CUSTOM_APP_NAME}"
            
            # Устанавливаем зависимости для тестов
            bench pip install -q --use-pep517 pytest pytest-cov
          '
      
      # 6. Останавливаем фоновые сервисы перед запуском тестов
      - name: Shutdown Background Services
        if: always()
        run: docker compose -f docker-compose.test.yml down

      # 7. Запускаем тесты с помощью `docker compose up`
      - name: Build and Run Tests
        run: |
          # Создаем override-файл, чтобы заменить команду "sleep infinity" на команду для запуска тестов
          cat > docker-compose.override.yml <<-EOF
          services:
            frappe:
              command: >
                bash -c "
                  set -e
                  bench --site ${{ env.SITE_NAME }} set-config allow_tests true
                  cd /workspace
                  pytest -m 'not slow' --cov=${{ env.CUSTOM_APP_NAME }} --cov-report=xml
                "
          EOF

          # Запускаем стек: он соберется, запустится, выполнит тесты в контейнере frappe,
          # после чего все контейнеры остановятся, а код выхода frappe станет кодом шага.
          docker compose \
            -f docker-compose.test.yml \
            -f docker-compose.override.yml \
            up \
            --build \
            --abort-on-container-exit \
            --exit-code-from frappe

      # 8. Публикуем отчет о покрытии
      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
