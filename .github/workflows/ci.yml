name: tests

on: [push, pull_request]

jobs:
  server:
    runs-on: ubuntu-22.04

    # Базовые переменные — их же пишем в .env
    env:
      SITE_NAME: test_site
      ADMIN_PASSWORD: admin
      ERPNEXT_TAG: v15.65.4
      DB_ROOT_PASSWORD: root

    steps:
      # 1. Получаем код
      - uses: actions/checkout@v4

      # Cache Python packages
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/*requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Cache Node packages
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # 2. Создаём .env для docker-compose
      - name: Generate .env
        run: |
          {
            echo "SITE_NAME=${{ env.SITE_NAME }}"
            echo "ADMIN_PASSWORD=${{ env.ADMIN_PASSWORD }}"
            echo "ERPNEXT_TAG=${{ env.ERPNEXT_TAG }}"
            echo "DB_ROOT_PASSWORD=${{ env.DB_ROOT_PASSWORD }}"
          } > .env

      # 3. Проверяем, что указанный тег ERPNext существует в Docker Hub
      - name: Validate ERPNext tag
        run: docker manifest inspect frappe/erpnext:${{ env.ERPNEXT_TAG }} >/dev/null

      # 4. Загружаем образы (если не скачались — явно завершаем job)
      - name: Pull images
        run: |
          docker compose --env-file .env -f docker-compose.test.yml pull \
          || { echo "::error::Image pull failed"; exit 1; }

      # 5. Поднимаем стек
      - name: Start stack
        run: docker compose --env-file .env -f docker-compose.test.yml up -d

      # 6. Устанавливаем приложения и зависимости внутрь контейнера frappe
      - name: Install app + ERPNext + deps
        run: |
          # 1) починили права (root внутри контейнера)
          docker compose exec -T --user root frappe \
            chown -R frappe:frappe /home/frappe/frappe-bench

          # 2) теперь обычный сценарий (под пользователем frappe)
          docker compose exec -T frappe bash -eo pipefail -c '
            set -e
            source /workspace/.env

            # --- ERPNext ----------------------------------------------------
            if [ ! -d apps/erpnext ]; then
                echo "ERPNext not found — cloning..."
                bench get-app --branch "${ERPNEXT_TAG}" --depth 1 erpnext https://github.com/frappe/erpnext
            elif [ ! -d apps/erpnext/.git ]; then
                echo "ERPNext present but not a git repo — replacing..."
                rm -rf apps/erpnext
                bench get-app --branch "${ERPNEXT_TAG}" --depth 1 erpnext https://github.com/frappe/erpnext
            else
                echo "ERPNext git repo detected — switching to tag ${ERPNEXT_TAG}"
                cd apps/erpnext
                git fetch --depth=1 origin "${ERPNEXT_TAG}"
                git checkout -q "${ERPNEXT_TAG}"
                cd -
            fi

            # обновляем зависимости под актуальный код
            # начиная с bench 5.25 флаг --overwrite больше не нужен
            bench setup requirements --node --python

            # --- Ваша кастомная аппка -------------------------------------------
            bench get-app ferum_customs /workspace

            # --- dev-зависимости и сайт -----------------------------------------
            bench new-site --db-root-password "$DB_ROOT_PASSWORD" --admin-password "$ADMIN_PASSWORD" "$SITE_NAME"
            bench --site "$SITE_NAME" install-app erpnext
            bench --site "$SITE_NAME" install-app ferum_customs

            # pytest
            bench pip install -q pytest pytest-cov
          '

      # 7. Запускаем тесты
      - name: Run tests
        run: |
          docker compose --env-file .env -f docker-compose.test.yml run --exit-code-from frappe --rm frappe bash -c '
            set -e
            bench --site "$SITE_NAME" set-config allow_tests true
            cd /workspace
            pytest -m "not slow" --cov=ferum_customs --cov-report=xml
          '

      # 8. Публикуем отчёт о покрытии
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml
