# ======================================================================================
# Оптимизированный CI Workflow для "ferum_customs"
#
# Этот воркфлоу использует Docker Compose для создания консистентной среды
# и запускает тесты, следуя лучшим практикам Frappe Framework.
# Он работает для pull-реквестов и пушей в ветки develop и main.
# ======================================================================================

name: CI / CD

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

concurrency:
  # Группируем запуски, чтобы отменять предыдущие для того же PR или ветки
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # --- Задание для запуска тестов с использованием Docker ---
  run-tests:
    name: Run Frappe Tests
    runs-on: ubuntu-latest

    # Определение переменных окружения для docker-compose
    env:
      # Имя сайта для тестов
      FRAPPE_SITE_NAME: tests.local
      # Пароль администратора
      ADMIN_PASSWORD: admin
      # Пароль root для базы данных
      DB_ROOT_PASSWORD: root
      # Версия Frappe/ERPNext для использования
      FRAPPE_VERSION: v15.15.0
      ERPNEXT_VERSION: v15.15.0
      # Версия MariaDB
      MARIADB_TAG: '10.6'

    steps:
      # 1. Получаем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Устанавливаем Buildx для сборки Docker-образов (лучшая практика)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Кэшируем Docker-слои для ускорения последующих сборок
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 4. Собираем кастомный образ с нашим приложением, используя Dockerfile
      # Если вы хотите тестировать без пересборки, можно использовать готовые образы
      # и монтировать код, как в вашем docker-compose.test.yml
      - name: Build custom Frappe image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Указываем путь к нашему Dockerfile
          file: ./Dockerfile  # Предполагается, что Dockerfile из Canvas лежит в корне
          load: true
          # Присваиваем тег, чтобы docker-compose мог его использовать
          tags: ferum-customs-app:latest
          # Используем кэш для ускорения
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Этот шаг нужен, если кэш был обновлен
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 5. Запускаем сервисы (БД, Redis) в фоновом режиме
      - name: Start background services
        run: docker compose -f docker-compose.test.yml up -d mariadb redis-cache redis-queue

      # 6. Создаем новый сайт и устанавливаем приложения
      # Используем контейнер create-site, который выполнит нужные команды и завершится
      - name: Setup Site and Install Apps
        run: docker compose -f docker-compose.test.yml run --rm create-site

      # 7. Запускаем тесты с помощью стандартной команды bench
      # Это предпочтительный способ, так как он корректно инициализирует окружение Frappe.
      - name: Run Bench Tests
        run: |
          docker compose -f docker-compose.test.yml exec -T frappe bench --site ${{ env.FRAPPE_SITE_NAME }} set-config allow_tests true
          docker compose -f docker-compose.test.yml exec -T frappe bench --site ${{ env.FRAPPE_SITE_NAME }} run-tests --app ferum_customs --coverage

      # 8. Останавливаем все сервисы после завершения тестов
      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.test.yml down -v --remove-orphans

