# .github/workflows/ci.yml

name: CI/CD Pipeline

run-name: >-
  🛠️ ${{ github.actor }} запустил CI для ветки ${{ github.ref_name }}

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install lint dependencies
        run: |
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; \
          elif [ -f dev-requirements.txt ]; then pip install -r dev-requirements.txt; \
          else pip install -r requirements.txt; fi

      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure

  tests:
    needs: lint
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    env:
      SITE_NAME: test_site
      ADMIN_PASSWORD: admin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore Docker build cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/buildkit
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildkit-

      - name: Upgrade Docker Compose
        run: |
          sudo curl -L https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker compose version

      - name: Build and start Frappe Stack
        run: DOCKER_BUILDKIT=1 docker compose -f docker-compose.yml up -d --build

      - name: Create Frappe test site
        run: |
          docker compose exec -T frappe bench new-site $SITE_NAME \
            --admin-password $ADMIN_PASSWORD --no-mariadb-socket \
            --install-app erpnext --install-app ferum_customs
        env:
          SITE_NAME: test_site
          ADMIN_PASSWORD: admin

      - name: Wait for site to be ready
        run: |
          echo "Waiting for Frappe site..."
          timeout=600
          until $(curl -sSf http://localhost:8000/api/method/ping > /dev/null); do
            sleep 15; timeout=$((timeout-15)); [ $timeout -le 0 ] && exit 1;
          done

      - name: Run tests in container
        run: docker compose exec -T frappe bench --site "$SITE_NAME" run-tests --app ferum_customs

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports
          path: ./reports

      - name: Stop Frappe Stack
        if: always()
        run: docker compose down -v

      - name: Save Docker build cache
        if: always()
        uses: actions/cache@v4
        with:
          path: ~/.cache/buildkit
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
