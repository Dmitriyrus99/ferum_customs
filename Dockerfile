# ======================================================================================
# Dockerfile для разработки приложения "ferum_customs" на Frappe v15
# ======================================================================================

# 1. Используем официальный образ Frappe v15 в качестве основы.
# Это гарантирует, что все системные зависимости, Python, Node.js, redis и bench
# уже установлены и сконфигурированы правильно.
# Выбираем '-dev' тэг, так как он содержит полезные для разработки утилиты.
FROM frappe/frappe-worker:v15-dev

# 2. Переключаемся на пользователя root для установки дополнительных системных пакетов.
# Например, git (если его нет) или другие инструменты отладки.
USER root

RUN apt-get update && apt-get install -y --no-install-recommends \
    # vim или nano для редактирования файлов внутри контейнера
    vim \
    # git для работы с репозиториями напрямую из контейнера
    git \
    && rm -rf /var/lib/apt/lists/*

# 3. Переключаемся обратно на стандартного пользователя frappe.
# Все операции с bench и приложением должны выполняться от его имени.
USER frappe

# 4. Устанавливаем рабочую директорию.
# Это домашняя директория пользователя frappe, где обычно располагается bench.
WORKDIR /home/frappe

# 5. Копируем requirements.txt вашего приложения.
# Это позволит установить зависимости до копирования всего кода,
# что лучше использует кэширование слоев Docker.
COPY --chown=frappe:frappe ./requirements.txt /tmp/requirements.txt

# 6. Устанавливаем Python-зависимости вашего приложения.
# Frappe-bench уже создан в базовом образе, мы просто используем его pip.
# Обратите внимание, что FastAPI и Aiogram будут установлены в окружение bench.
RUN bench/bin/pip install --no-cache-dir -r /tmp/requirements.txt

# 7. Копируем все приложение в директорию apps внутри frappe-bench.
# Этот шаг делает образ самодостаточным. Для локальной разработки этот шаг
# можно заменить монтированием тома в docker-compose.yml для "живой" перезагрузки кода.
COPY --chown=frappe:frappe . /home/frappe/frappe-bench/apps/ferum_customs

# 8. Устанавливаем приложение на сайт по умолчанию (frontend).
# Эта команда регистрирует DocTypes, хуки и другую логику в базе данных.
# После этого шага приложение становится "видимым" для Frappe.
RUN cd /home/frappe/frappe-bench && \
    bench --site frontend install-app ferum_customs

# 9. Собираем фронтенд-ассеты (JS/CSS).
# Эта команда необходима, чтобы ваши кастомные JS-скрипты и стили
# были скомпилированы и подключены к интерфейсу Frappe.
RUN cd /home/frappe/frappe-bench && \
    bench build --app ferum_customs

# КОНЕЦ Dockerfile.
# ENTRYPOINT и CMD наследуются из базового образа frappe/frappe-worker.
