--- a/ferum_customs/ferum_customs/report/service_request_overview/service_request_overview.py
+++ b/ferum_customs/ferum_customs/report/service_request_overview/service_request_overview.py
@@ -1,6 +1,6 @@
 from __future__ import annotations
 
-from typing import Any
+from typing import Any, Optional, Tuple, List, Dict
 
 import frappe
 from frappe import _
@@ -9,8 +9,17 @@
 
 
 def execute(
-    filters: dict[str, Any] | None = None
-) -> tuple[list[dict[str, Any]], list[dict[str, Any]]]:
+    filters: Optional[Dict[str, Any]] = None
+) -> Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]:
+    """
+    Execute the service request overview report.
+
+    Args:
+        filters (Optional[Dict[str, Any]]): Filters to apply to the report.
+
+    Returns:
+        Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]: Columns and data for the report.
+    """
     open_count = frappe.db.count(
         "service_request",
         {"status": ["not in", (STATUS_ZAKRYTA, STATUS_OTMENENA)]},
@@ -26,10 +35,10 @@
     avg_seconds = (
         frappe.db.sql(
             """
-        select avg(timestampdiff(second, actual_start_datetime, actual_end_datetime))
-        from `tabservice_request`
-        where actual_end_datetime is not null
-        """,
+            SELECT AVG(TIMESTAMPDIFF(SECOND, actual_start_datetime, actual_end_datetime))
+            FROM `tabService Request`
+            WHERE actual_end_datetime IS NOT NULL
+            """,
             as_dict=False,
         )[0][0]
         or 0
@@ -52,4 +61,4 @@
         {"metric": _("Avg Resolution (h)"), "value": avg_hours},
     ]
 
-    return columns, data
+    return columns, data
