--- a/testvenv/lib/python3.12/site-packages/pip/__pip-runner__.py
+++ b/testvenv/lib/python3.12/site-packages/pip/__pip-runner__.py
@@ -4,17 +4,16 @@
 an import statement.
 """
 
-# /!\ This version compatibility check section must be Python 2 compatible. /!\
-
 import sys
+import runpy  # noqa: E402
+from importlib.machinery import PathFinder  # noqa: E402
+from os.path import dirname  # noqa: E402
 
 # Copied from setup.py
 PYTHON_REQUIRES = (3, 7)
 
-
-def version_str(version):  # type: ignore
+def version_str(version):
     return ".".join(str(v) for v in version)
-
 
 if sys.version_info[:2] < PYTHON_REQUIRES:
     raise SystemExit(
@@ -23,19 +22,11 @@
         )
     )
 
-# From here on, we can use Python 3 features, but the syntax must remain
-# Python 2 compatible.
-
-import runpy  # noqa: E402
-from importlib.machinery import PathFinder  # noqa: E402
-from os.path import dirname  # noqa: E402
-
 PIP_SOURCES_ROOT = dirname(dirname(__file__))
-
 
 class PipImportRedirectingFinder:
     @classmethod
-    def find_spec(self, fullname, path=None, target=None):  # type: ignore
+    def find_spec(cls, fullname, path=None, target=None):
         if fullname != "pip":
             return None
 
@@ -43,8 +34,7 @@
         assert spec, (PIP_SOURCES_ROOT, fullname)
         return spec
 
-
 sys.meta_path.insert(0, PipImportRedirectingFinder())
 
-assert __name__ == "__main__", "Cannot run __pip-runner__.py as a non-main module"
-runpy.run_module("pip", run_name="__main__", alter_sys=True)
+if __name__ == "__main__":
+    runpy.run_module("pip", run_name="__main__", alter_sys=True)
