--- a/testvenv/lib/python3.12/site-packages/pip/_vendor/colorama/winterm.py
+++ b/testvenv/lib/python3.12/site-packages/pip/_vendor/colorama/winterm.py
@@ -37,10 +37,6 @@
         self._default_fore = self._fore
         self._default_back = self._back
         self._default_style = self._style
-        # In order to emulate LIGHT_EX in windows, we borrow the BRIGHT style.
-        # So that LIGHT_EX colors and BRIGHT style do not clobber each other,
-        # we track them separately, since LIGHT_EX is overwritten by Fore/Back
-        # and BRIGHT is overwritten by Style codes.
         self._light = 0
 
     def get_attrs(self):
@@ -53,14 +49,13 @@
 
     def reset_all(self, on_stderr=None):
         self.set_attrs(self._default)
-        self.set_console(attrs=self._default)
+        self.set_console(attrs=self._default, on_stderr=on_stderr)
         self._light = 0
 
     def fore(self, fore=None, light=False, on_stderr=False):
         if fore is None:
             fore = self._default_fore
         self._fore = fore
-        # Emulate LIGHT_EX with BRIGHT Style
         if light:
             self._light |= WinStyle.BRIGHT
         else:
@@ -71,7 +66,6 @@
         if back is None:
             back = self._default_back
         self._back = back
-        # Emulate LIGHT_EX with BRIGHT_BACKGROUND Style
         if light:
             self._light |= WinStyle.BRIGHT_BACKGROUND
         else:
@@ -94,16 +88,12 @@
 
     def get_position(self, handle):
         position = win32.GetConsoleScreenBufferInfo(handle).dwCursorPosition
-        # Because Windows coordinates are 0-based,
-        # and win32.SetConsoleCursorPosition expects 1-based.
         position.X += 1
         position.Y += 1
         return position
 
     def set_cursor_position(self, position=None, on_stderr=False):
         if position is None:
-            # I'm not currently tracking the position, so there is no default.
-            # position = self.get_position()
             return
         handle = win32.STDOUT
         if on_stderr:
@@ -115,20 +105,15 @@
         if on_stderr:
             handle = win32.STDERR
         position = self.get_position(handle)
-        adjusted_position = (position.Y + y, position.X + x)
-        win32.SetConsoleCursorPosition(handle, adjusted_position, adjust=False)
+        adjusted_position = win32.COORD(position.X + x, position.Y + y)
+        win32.SetConsoleCursorPosition(handle, adjusted_position)
 
     def erase_screen(self, mode=0, on_stderr=False):
-        # 0 should clear from the cursor to the end of the screen.
-        # 1 should clear from the cursor to the beginning of the screen.
-        # 2 should clear the entire screen, and move cursor to (1,1)
         handle = win32.STDOUT
         if on_stderr:
             handle = win32.STDERR
         csbi = win32.GetConsoleScreenBufferInfo(handle)
-        # get the number of character cells in the current buffer
         cells_in_screen = csbi.dwSize.X * csbi.dwSize.Y
-        # get number of character cells before current cursor position
         cells_before_cursor = (
             csbi.dwSize.X * csbi.dwCursorPosition.Y + csbi.dwCursorPosition.X
         )
@@ -142,22 +127,15 @@
             from_coord = win32.COORD(0, 0)
             cells_to_erase = cells_in_screen
         else:
-            # invalid mode
             return
-        # fill the entire screen with blanks
         win32.FillConsoleOutputCharacter(handle, " ", cells_to_erase, from_coord)
-        # now set the buffer's attributes accordingly
         win32.FillConsoleOutputAttribute(
             handle, self.get_attrs(), cells_to_erase, from_coord
         )
         if mode == 2:
-            # put the cursor where needed
-            win32.SetConsoleCursorPosition(handle, (1, 1))
+            win32.SetConsoleCursorPosition(handle, win32.COORD(0, 0))
 
     def erase_line(self, mode=0, on_stderr=False):
-        # 0 should clear from the cursor to the end of the line.
-        # 1 should clear from the cursor to the beginning of the line.
-        # 2 should clear the entire line.
         handle = win32.STDOUT
         if on_stderr:
             handle = win32.STDERR
@@ -172,11 +150,8 @@
             from_coord = win32.COORD(0, csbi.dwCursorPosition.Y)
             cells_to_erase = csbi.dwSize.X
         else:
-            # invalid mode
             return
-        # fill the entire screen with blanks
         win32.FillConsoleOutputCharacter(handle, " ", cells_to_erase, from_coord)
-        # now set the buffer's attributes accordingly
         win32.FillConsoleOutputAttribute(
             handle, self.get_attrs(), cells_to_erase, from_coord
         )
@@ -200,6 +175,5 @@
         mode = win32.GetConsoleMode(handle)
         if mode & win32.ENABLE_VIRTUAL_TERMINAL_PROCESSING:
             return True
-    # Can get TypeError in testsuite where 'fd' is a Mock()
     except (OSError, TypeError):
-        return False
+        return False
