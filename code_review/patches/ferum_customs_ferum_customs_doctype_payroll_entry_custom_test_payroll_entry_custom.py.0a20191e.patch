--- a/ferum_customs/ferum_customs/doctype/payroll_entry_custom/test_payroll_entry_custom.py
+++ b/ferum_customs/ferum_customs/doctype/payroll_entry_custom/test_payroll_entry_custom.py
@@ -8,14 +8,28 @@
 
 
 class TestPayrollEntryCustom(FrappeTestCase):
+    def setUp(self):
+        # Setup code if needed
+        pass
+
+    def tearDown(self):
+        # Teardown code if needed
+        pass
+
     def test_total_payable_rounding(self):
+        """Test that total_payable is rounded to two decimal places in the validate method."""
         doc = frappe.new_doc("Payroll Entry Custom")
         doc.total_payable = 1234.567
-        doc.validate()
+        doc.validate()  # Ensure validate method handles rounding
         self.assertAlmostEqual(doc.total_payable, 1234.57, places=2)
 
-# Issues:
-# 1. The test assumes that `doc.validate()` will round `total_payable`, but this behavior should be explicitly defined in the `validate` method of the `Payroll Entry Custom` doctype.
-# 2. The test does not check if the `validate` method is correctly implemented to handle rounding. Ensure that the `validate` method in the doctype is responsible for rounding.
-# 3. The test should include setup and teardown methods if there are any dependencies or side effects.
-# 4. Consider adding more test cases to cover edge cases and different scenarios for rounding.
+    def test_total_payable_rounding_edge_cases(self):
+        """Test edge cases for total_payable rounding."""
+        edge_cases = [1234.564, 1234.565, 1234.566]
+        expected_results = [1234.56, 1234.57, 1234.57]
+        
+        for value, expected in zip(edge_cases, expected_results):
+            doc = frappe.new_doc("Payroll Entry Custom")
+            doc.total_payable = value
+            doc.validate()
+            self.assertAlmostEqual(doc.total_payable, expected, places=2)
