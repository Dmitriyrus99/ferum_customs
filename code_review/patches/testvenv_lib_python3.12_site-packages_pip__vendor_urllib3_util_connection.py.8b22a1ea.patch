--- a/testvenv/lib/python3.12/site-packages/pip/_vendor/urllib3/util/connection.py
+++ b/testvenv/lib/python3.12/site-packages/pip/_vendor/urllib3/util/connection.py
@@ -30,10 +30,6 @@
         return False
 
 
-# This function is copied from socket.py in the Python 2.7 standard
-# library test suite. Added to its signature is only `socket_options`.
-# One additional modification is that we avoid binding to IPv6 servers
-# discovered in DNS if the system doesn't have IPv6 functionality.
 def create_connection(
     address,
     timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
@@ -57,15 +53,12 @@
         host = host.strip("[]")
     err = None
 
-    # Using the value from allowed_gai_family() in the context of getaddrinfo lets
-    # us select whether to work with IPv4 DNS records, IPv6 records, or both.
-    # The original create_connection function always returns all records.
     family = allowed_gai_family()
 
     try:
         host.encode("idna")
     except UnicodeError:
-        return six.raise_from(
+        six.raise_from(
             LocationParseError("'%s', label empty or too long" % host), None
         )
 
@@ -75,7 +68,6 @@
         try:
             sock = socket.socket(af, socktype, proto)
 
-            # If provided, set socket level options before connecting.
             _set_socket_options(sock, socket_options)
 
             if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
@@ -89,7 +81,6 @@
             err = e
             if sock is not None:
                 sock.close()
-                sock = None
 
     if err is not None:
         raise err
@@ -121,19 +112,10 @@
     sock = None
     has_ipv6 = False
 
-    # App Engine doesn't support IPV6 sockets and actually has a quota on the
-    # number of sockets that can be used, so just early out here instead of
-    # creating a socket needlessly.
-    # See https://github.com/urllib3/urllib3/issues/1446
     if _appengine_environ.is_appengine_sandbox():
         return False
 
     if socket.has_ipv6:
-        # has_ipv6 returns true if cPython was compiled with IPv6 support.
-        # It does not tell us if the system has IPv6 support enabled. To
-        # determine that we must bind to an IPv6 address.
-        # https://github.com/urllib3/urllib3/pull/611
-        # https://bugs.python.org/issue658327
         try:
             sock = socket.socket(socket.AF_INET6)
             sock.bind((host, 0))
@@ -146,4 +128,4 @@
     return has_ipv6
 
 
-HAS_IPV6 = _has_ipv6("::1")
+HAS_IPV6 = _has_ipv6("::1")
