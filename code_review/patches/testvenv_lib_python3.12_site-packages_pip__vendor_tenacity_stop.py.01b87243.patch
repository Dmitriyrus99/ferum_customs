--- a/testvenv/lib/python3.12/site-packages/pip/_vendor/tenacity/stop.py
+++ b/testvenv/lib/python3.12/site-packages/pip/_vendor/tenacity/stop.py
@@ -1,18 +1,3 @@
-# Copyright 2016â€“2021 Julien Danjou
-# Copyright 2016 Joshua Harlow
-# Copyright 2013-2014 Ray Holder
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
 import abc
 import typing
 
@@ -20,78 +5,89 @@
 
 if typing.TYPE_CHECKING:
     import threading
-
     from pip._vendor.tenacity import RetryCallState
 
 
-class stop_base(abc.ABC):
+class StopBase(abc.ABC):
     """Abstract base class for stop strategies."""
 
     @abc.abstractmethod
     def __call__(self, retry_state: "RetryCallState") -> bool:
         pass
 
-    def __and__(self, other: "stop_base") -> "stop_all":
-        return stop_all(self, other)
+    def __and__(self, other: "StopBase") -> "StopAll":
+        if not isinstance(other, StopBase):
+            raise TypeError("Operand must be an instance of StopBase")
+        return StopAll(self, other)
 
-    def __or__(self, other: "stop_base") -> "stop_any":
-        return stop_any(self, other)
+    def __or__(self, other: "StopBase") -> "StopAny":
+        if not isinstance(other, StopBase):
+            raise TypeError("Operand must be an instance of StopBase")
+        return StopAny(self, other)
 
 
-StopBaseT = typing.Union[stop_base, typing.Callable[["RetryCallState"], bool]]
+StopBaseT = typing.Union[StopBase, typing.Callable[["RetryCallState"], bool]]
 
 
-class stop_any(stop_base):
+class StopAny(StopBase):
     """Stop if any of the stop condition is valid."""
 
-    def __init__(self, *stops: stop_base) -> None:
+    def __init__(self, *stops: StopBase) -> None:
+        if not all(isinstance(stop, StopBase) for stop in stops):
+            raise TypeError("All stops must be instances of StopBase")
         self.stops = stops
 
     def __call__(self, retry_state: "RetryCallState") -> bool:
         return any(x(retry_state) for x in self.stops)
 
 
-class stop_all(stop_base):
+class StopAll(StopBase):
     """Stop if all the stop conditions are valid."""
 
-    def __init__(self, *stops: stop_base) -> None:
+    def __init__(self, *stops: StopBase) -> None:
+        if not all(isinstance(stop, StopBase) for stop in stops):
+            raise TypeError("All stops must be instances of StopBase")
         self.stops = stops
 
     def __call__(self, retry_state: "RetryCallState") -> bool:
         return all(x(retry_state) for x in self.stops)
 
 
-class _stop_never(stop_base):
+class _StopNever(StopBase):
     """Never stop."""
 
     def __call__(self, retry_state: "RetryCallState") -> bool:
         return False
 
 
-stop_never = _stop_never()
+stop_never = _StopNever()
 
 
-class stop_when_event_set(stop_base):
+class StopWhenEventSet(StopBase):
     """Stop when the given event is set."""
 
     def __init__(self, event: "threading.Event") -> None:
+        if not isinstance(event, threading.Event):
+            raise TypeError("Event must be an instance of threading.Event")
         self.event = event
 
     def __call__(self, retry_state: "RetryCallState") -> bool:
         return self.event.is_set()
 
 
-class stop_after_attempt(stop_base):
+class StopAfterAttempt(StopBase):
     """Stop when the previous attempt >= max_attempt."""
 
     def __init__(self, max_attempt_number: int) -> None:
+        if not isinstance(max_attempt_number, int) or max_attempt_number < 1:
+            raise ValueError("max_attempt_number must be a positive integer")
         self.max_attempt_number = max_attempt_number
 
     def __call__(self, retry_state: "RetryCallState") -> bool:
         return retry_state.attempt_number >= self.max_attempt_number
 
 
-class stop_after_delay(stop_base):
+class StopAfterDelay(StopBase):
     """Stop when the time from the first attempt >= limit."""
 
     def __init__(self, max_delay: _utils.time_unit_type) -> None:
@@ -100,4 +96,4 @@
     def __call__(self, retry_state: "RetryCallState") -> bool:
         if retry_state.seconds_since_start is None:
             raise RuntimeError("__call__() called but seconds_since_start is not set")
-        return retry_state.seconds_since_start >= self.max_delay
+        return retry_state.seconds_since_start >= self.max_delay
