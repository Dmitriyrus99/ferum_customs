--- a/ferum_customs/api/__init__.py
+++ b/ferum_customs/api/__init__.py
@@ -1,26 +1,11 @@
-from typing import Any, cast, List, Dict, Optional
+from typing import Any, List, Dict, Optional
 
 import frappe
-from fastapi import FastAPI, HTTPException
 from frappe import _, whitelist
 from frappe.exceptions import PermissionError
-
 from ferum_customs.constants import SERVICE_REQUEST_STATUSES, STATUS_OTKRYTA
 
-app = FastAPI()
-
-
-@app.get("/")
-def root() -> Dict[str, bool]:
-    return {"ok": True}
-
-
-@app.get("/health")
-def health() -> Dict[str, str]:
-    return {"status": "ok"}
-
-
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def validate_service_request(docname: str) -> Optional[Dict[str, Any]]:
     """Return the service request document as a dict after permission check."""
     if not frappe.has_permission("Service Request", "read"):
@@ -28,27 +13,27 @@
 
     try:
         doc = frappe.get_doc("Service Request", docname)
-        return cast(Dict[str, Any], doc.as_dict())
+        return doc.as_dict()
     except frappe.DoesNotExistError:
         frappe.throw(_("Service Request not found"), frappe.DoesNotExistError)
     except Exception as e:
         frappe.log_error(frappe.get_traceback(), "Error validating Service Request")
-        raise HTTPException(status_code=500, detail=str(e))
+        raise frappe.ValidationError(str(e))
 
 
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def on_submit_service_request(docname: str) -> None:
     """Hook executed when a Service Request is submitted."""
-    frappe.logger(__name__).info(f"Service Request '{docname}' submitted")
+    frappe.logger().info(f"Service Request '{docname}' submitted")
 
 
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def cancel_service_request(docname: str) -> None:
     """Hook executed when a Service Request is cancelled."""
-    frappe.logger(__name__).info(f"Service Request '{docname}' cancelled")
+    frappe.logger().info(f"Service Request '{docname}' cancelled")
 
 
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def validate_service_report(docname: str) -> Optional[Dict[str, Any]]:
     """Return the service report document as a dict after permission check."""
     if not frappe.has_permission("Service Report", "read"):
@@ -56,21 +41,21 @@
 
     try:
         doc = frappe.get_doc("Service Report", docname)
-        return cast(Dict[str, Any], doc.as_dict())
+        return doc.as_dict()
     except frappe.DoesNotExistError:
         frappe.throw(_("Service Report not found"), frappe.DoesNotExistError)
     except Exception as e:
         frappe.log_error(frappe.get_traceback(), "Error validating Service Report")
-        raise HTTPException(status_code=500, detail=str(e))
+        raise frappe.ValidationError(str(e))
 
 
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def on_submit_service_report(docname: str) -> None:
     """Hook executed when a Service Report is submitted."""
-    frappe.logger(__name__).info(f"Service Report '{docname}' submitted")
+    frappe.logger().info(f"Service Report '{docname}' submitted")
 
 
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def create_invoice_from_report(service_report: str) -> str:
     """Create a Sales Invoice draft from a submitted Service Report.
 
@@ -92,7 +77,7 @@
     try:
         sr.calculate_totals()
     except Exception as exc:
-        frappe.logger(__name__).warning(
+        frappe.logger().warning(
             f"Failed recalculating totals for Service Report '{service_report}': {exc}",
             exc_info=True,
         )
@@ -118,17 +103,16 @@
         )
 
     invoice.insert(ignore_permissions=True)
-    return cast(str, invoice.name)
+    return invoice.name
 
 
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def bot_create_service_request(
     subject: str,
     customer: Optional[str] = None,
     description: Optional[str] = None,
 ) -> str:
     """Create a Service Request document on behalf of the Telegram bot."""
-
     doc = frappe.get_doc(
         {
             "doctype": "Service Request",
@@ -139,13 +123,12 @@
         }
     )
     doc.insert(ignore_permissions=True)
-    return cast(str, doc.name)
+    return doc.name
 
 
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def bot_update_service_request_status(docname: str, status: str) -> None:
     """Update the status of a Service Request from the bot."""
-
     if status not in SERVICE_REQUEST_STATUSES:
         frappe.throw(_("Invalid status: {0}").format(status))
 
@@ -154,10 +137,9 @@
     sr.save(ignore_permissions=True)
 
 
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def bot_upload_attachment(docname: str, file_url: str, attachment_type: str) -> str:
     """Create a Custom Attachment linked to a Service Request."""
-
     ca = frappe.get_doc(
         {
             "doctype": "Custom Attachment",
@@ -167,19 +149,15 @@
         }
     )
     ca.insert(ignore_permissions=True)
-    return cast(str, ca.name)
+    return ca.name
 
 
-@whitelist()  # type: ignore[misc]
+@frappe.whitelist()
 def bot_get_service_requests(status: Optional[str] = None) -> List[Dict[str, Any]]:
     """Return a list of Service Requests filtered by status."""
-
     filters = {"status": status} if status else {}
-    return cast(
-        List[Dict[str, Any]],
-        frappe.get_all(
-            "Service Request",
-            filters=filters,
-            fields=["name", "subject", "status"],
-        ),
-    )
+    return frappe.get_all(
+        "Service Request",
+        filters=filters,
+        fields=["name", "subject", "status"],
+    )
