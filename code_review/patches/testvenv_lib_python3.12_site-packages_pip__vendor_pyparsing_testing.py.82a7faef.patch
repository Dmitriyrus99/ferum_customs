--- a/testvenv/lib/python3.12/site-packages/pip/_vendor/pyparsing/testing.py
+++ b/testvenv/lib/python3.12/site-packages/pip/_vendor/pyparsing/testing.py
@@ -1,4 +1,19 @@
-# testing.py
+# Issues and corrections:
+
+# 1. Inconsistent method naming:
+#    - `parse_string` should be `parseString` to match pyparsing's method naming convention.
+#    - `parseAll` should be `parse_all` to match the convention used in the rest of the code.
+
+# 2. Incorrect use of `assertRaises`:
+#    - `assertRaises` should be used with the exception type as the first argument, not `expected_exception`.
+
+# 3. Potential issue with `__compat__.collect_all_And_tokens`:
+#    - The assignment in `restore` should match the structure used in `save`.
+
+# 4. Incorrect parameter documentation:
+#    - The `s` parameter in `with_line_numbers` is incorrectly documented as a tuple.
+
+# Corrected code:
 
 import typing
 from contextlib import contextmanager
@@ -100,7 +115,9 @@
                 "recursion_enabled"
             ]
 
-            __compat__.collect_all_And_tokens = self._save_context["__compat__"]
+            __compat__.collect_all_And_tokens = self._save_context["__compat__"][
+                "collect_all_And_tokens"
+            ]
 
             return self
 
@@ -139,7 +156,7 @@
             Convenience wrapper assert to test a parser element and input string, and assert that
             the resulting ``ParseResults.asList()`` is equal to the ``expected_list``.
             """
-            result = expr.parse_string(test_string, parse_all=True)
+            result = expr.parseString(test_string, parse_all=True)
             if verbose:
                 print(result.dump())
             else:
@@ -153,7 +170,7 @@
             Convenience wrapper assert to test a parser element and input string, and assert that
             the resulting ``ParseResults.asDict()`` is equal to the ``expected_dict``.
             """
-            result = expr.parse_string(test_string, parseAll=True)
+            result = expr.parseString(test_string, parse_all=True)
             if verbose:
                 print(result.dump())
             else:
@@ -196,7 +213,7 @@
                     )
                     if expected_exception is not None:
                         with self.assertRaises(
-                            expected_exception=expected_exception, msg=fail_msg or msg
+                            expected_exception, msg=fail_msg or msg
                         ):
                             if isinstance(result, Exception):
                                 raise result
@@ -242,7 +259,7 @@
         Helpful method for debugging a parser - prints a string with line and column numbers.
         (Line and column numbers are 1-based.)
 
-        :param s: tuple(bool, str - string to be printed with line and column numbers
+        :param s: str - string to be printed with line and column numbers
         :param start_line: int - (optional) starting line number in s to print (default=1)
         :param end_line: int - (optional) ending line number in s to print (default=len(s))
         :param expand_tabs: bool - (optional) expand tabs to spaces, to match the pyparsing default
@@ -322,4 +339,4 @@
                 for i, line in enumerate(s_lines, start=start_line)
             )
             + "\n"
-        )
+        )
