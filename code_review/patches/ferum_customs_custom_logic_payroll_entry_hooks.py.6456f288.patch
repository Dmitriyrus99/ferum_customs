--- a/ferum_customs/custom_logic/payroll_entry_hooks.py
+++ b/ferum_customs/custom_logic/payroll_entry_hooks.py
@@ -3,21 +3,17 @@
 
 from __future__ import annotations
 
-from typing import TYPE_CHECKING
+from typing import TYPE_CHECKING, Optional
 
 import frappe
 from frappe import _  # Для перевода строк
 
 if TYPE_CHECKING:
-    # Предполагаемая структура для импорта DocType:
     from ferum_customs.ferum_customs.doctype.payroll_entry_custom.payroll_entry_custom import (
         PayrollEntryCustom,
     )
 
-# from ..doctype.service_report.service_report import ServiceReport # Если используется в расчетах
-
-
-def validate(doc: PayrollEntryCustom, method: str | None = None) -> None:
+def validate(doc: PayrollEntryCustom, method: Optional[str] = None) -> None:
     """
     Проверяет корректность дат периода. Дата окончания не может быть раньше даты начала.
 
@@ -39,39 +35,27 @@
                 )
             )
 
-    # Сюда можно добавить другие проверки для PayrollEntryCustom.
-    # if not doc.get("employee"):
-    #     frappe.throw(_("Не выбран сотрудник для расчета зарплаты."))
-
-
-def before_save(doc: PayrollEntryCustom, method: str | None = None) -> None:
+def before_save(doc: PayrollEntryCustom, method: Optional[str] = None) -> None:
     """Calculate ``total_payable`` before saving."""
 
     total_bonus = 0.0
-    try:
-        if doc.get("employee") and doc.get("start_date") and doc.get("end_date"):
-            reports = frappe.get_all(
-                "ServiceReport",
-                filters={
-                    "custom_assigned_engineer": doc.employee,
-                    "posting_date": ["between", [doc.start_date, doc.end_date]],
-                    "docstatus": 1,
-                },
-                fields=["custom_bonus_amount"],
-            )
-            for r in reports:
-                try:
-                    total_bonus += float(r.get("custom_bonus_amount") or 0)
-                except (TypeError, ValueError):
-                    frappe.logger(__name__).warning(
-                        f"Invalid bonus value in ServiceReport '{r}' while calculating payroll"
-                    )
-
-    except Exception as exc:
-        frappe.logger(__name__).error(
-            f"Error fetching ServiceReport bonuses for '{doc.name}': {exc}",
-            exc_info=True,
+    if doc.get("employee") and doc.get("start_date") and doc.get("end_date"):
+        reports = frappe.get_all(
+            "ServiceReport",
+            filters={
+                "custom_assigned_engineer": doc.employee,
+                "posting_date": ["between", [doc.start_date, doc.end_date]],
+                "docstatus": 1,
+            },
+            fields=["custom_bonus_amount"],
         )
+        for r in reports:
+            try:
+                total_bonus += float(r.get("custom_bonus_amount") or 0)
+            except (TypeError, ValueError):
+                frappe.logger(__name__).warning(
+                    f"Invalid bonus value in ServiceReport '{r}' while calculating payroll"
+                )
 
     base_salary = float(doc.get("base_salary", 0.0) or 0.0)
     additional_pay = float(doc.get("additional_pay", 0.0) or 0.0)
@@ -79,8 +63,8 @@
 
     doc.total_payable = base_salary + additional_pay + total_bonus - total_deduction
 
-    if doc.get("total_payable") is None:
+    if doc.total_payable is None:
         doc.total_payable = 0.0
 
-    if isinstance(doc.get("total_payable"), float | int):
-        doc.total_payable = round(doc.total_payable, 2)
+    if isinstance(doc.total_payable, (float, int)):
+        doc.total_payable = round(doc.total_payable, 2)
