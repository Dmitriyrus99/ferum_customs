--- a/tests/unit/test_bot_service.py
+++ b/tests/unit/test_bot_service.py
@@ -18,12 +18,22 @@
 
 from telegram_bot.bot_service import IncidentStates, get_dispatcher, start_handler
 
+@pytest.fixture
+def bot() -> Bot:
+    """Fixture to create a Bot instance."""
+    token = os.getenv("BOT_TOKEN")
+    if not token:
+        raise ValueError("BOT_TOKEN environment variable is not set.")
+    return Bot(token=token, parse_mode="HTML")
+
+@pytest.fixture
+def storage() -> MemoryStorage:
+    """Fixture to create a MemoryStorage instance."""
+    return MemoryStorage()
 
 @pytest.mark.asyncio
-async def test_start_handler_sets_incident_state():
+async def test_start_handler_sets_incident_state(bot: Bot, storage: MemoryStorage):
     """Test that start_handler sets the FSM to the correct state."""
-    bot = Bot(token=os.getenv("BOT_TOKEN"), parse_mode="HTML")  # Use environment variable for token
-    storage = MemoryStorage()
     key = StorageKey(bot_id=bot.id or 0, chat_id=123, user_id=123)
     state = FSMContext(storage=storage, key=key)
     message = cast(
@@ -39,11 +49,8 @@
     await start_handler(bot=bot, message=message, state=state)
     assert await state.get_state() == IncidentStates.waiting_object.state
 
-
-def test_get_dispatcher_custom_bot_and_storage():
+def test_get_dispatcher_custom_bot_and_storage(bot: Bot, storage: MemoryStorage):
     """Test that get_dispatcher returns the provided bot and storage objects."""
-    bot = Bot(token=os.getenv("BOT_TOKEN"), parse_mode="HTML")  # Use environment variable for token
-    storage = MemoryStorage()
     dp = get_dispatcher(bot=bot, storage=storage)
     assert dp.bot is bot
-    assert dp.storage is storage
+    assert dp.storage is storage
