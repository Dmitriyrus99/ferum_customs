--- a/testvenv/lib/python3.12/site-packages/pip/_vendor/pyproject_hooks/_impl.py
+++ b/testvenv/lib/python3.12/site-packages/pip/_vendor/pyproject_hooks/_impl.py
@@ -5,7 +5,7 @@
 from contextlib import contextmanager
 from os.path import abspath
 from os.path import join as pjoin
-from subprocess import STDOUT, check_call, check_output
+from subprocess import STDOUT, check_call, check_output, CalledProcessError
 
 from ._in_process import _in_proc_script_path
 
@@ -60,7 +60,10 @@
     if extra_environ:
         env.update(extra_environ)
 
-    check_call(cmd, cwd=cwd, env=env)
+    try:
+        check_call(cmd, cwd=cwd, env=env)
+    except CalledProcessError as e:
+        raise RuntimeError(f"Subprocess failed with error: {e}")
 
 
 def quiet_subprocess_runner(cmd, cwd=None, extra_environ=None):
@@ -72,7 +75,10 @@
     if extra_environ:
         env.update(extra_environ)
 
-    check_output(cmd, cwd=cwd, env=env, stderr=STDOUT)
+    try:
+        check_output(cmd, cwd=cwd, env=env, stderr=STDOUT)
+    except CalledProcessError as e:
+        raise RuntimeError(f"Subprocess failed with error: {e}")
 
 
 def norm_and_check(source_tree, requested):
@@ -88,12 +94,9 @@
 
     abs_source = os.path.abspath(source_tree)
     abs_requested = os.path.normpath(os.path.join(abs_source, requested))
-    # We have to use commonprefix for Python 2.7 compatibility. So we
-    # normalise case to avoid problems because commonprefix is a character
-    # based comparison :-(
     norm_source = os.path.normcase(abs_source)
     norm_requested = os.path.normcase(abs_requested)
-    if os.path.commonprefix([norm_source, norm_requested]) != norm_source:
+    if not norm_requested.startswith(norm_source + os.sep):
         raise ValueError("paths must be inside source tree")
 
     return abs_requested
@@ -110,14 +113,6 @@
         runner=None,
         python_executable=None,
     ):
-        """
-        :param source_dir: The source directory to invoke the build backend for
-        :param build_backend: The build backend spec
-        :param backend_path: Additional path entries for the build backend spec
-        :param runner: The :ref:`subprocess runner <Subprocess Runners>` to use
-        :param python_executable:
-            The Python executable used to invoke the build backend
-        """
         if runner is None:
             runner = default_subprocess_runner
 
@@ -133,15 +128,6 @@
 
     @contextmanager
     def subprocess_runner(self, runner):
-        """A context manager for temporarily overriding the default
-        :ref:`subprocess runner <Subprocess Runners>`.
-
-        .. code-block:: python
-
-            hook_caller = BuildBackendHookCaller(...)
-            with hook_caller.subprocess_runner(quiet_subprocess_runner):
-                ...
-        """
         prev = self._subprocess_runner
         self._subprocess_runner = runner
         try:
@@ -150,20 +136,9 @@
             self._subprocess_runner = prev
 
     def _supported_features(self):
-        """Return the list of optional features supported by the backend."""
         return self._call_hook("_supported_features", {})
 
     def get_requires_for_build_wheel(self, config_settings=None):
-        """Get additional dependencies required for building a wheel.
-
-        :returns: A list of :pep:`dependency specifiers <508>`.
-        :rtype: list[str]
-
-        .. admonition:: Fallback
-
-            If the build backend does not defined a hook with this name, an
-            empty list will be returned.
-        """
         return self._call_hook(
             "get_requires_for_build_wheel", {"config_settings": config_settings}
         )
@@ -171,19 +146,6 @@
     def prepare_metadata_for_build_wheel(
         self, metadata_directory, config_settings=None, _allow_fallback=True
     ):
-        """Prepare a ``*.dist-info`` folder with metadata for this project.
-
-        :returns: Name of the newly created subfolder within
-                  ``metadata_directory``, containing the metadata.
-        :rtype: str
-
-        .. admonition:: Fallback
-
-            If the build backend does not define a hook with this name and
-            ``_allow_fallback`` is truthy, the backend will be asked to build a
-            wheel via the ``build_wheel`` hook and the dist-info extracted from
-            that will be returned.
-        """
         return self._call_hook(
             "prepare_metadata_for_build_wheel",
             {
@@ -196,18 +158,6 @@
     def build_wheel(
         self, wheel_directory, config_settings=None, metadata_directory=None
     ):
-        """Build a wheel from this project.
-
-        :returns:
-            The name of the newly created wheel within ``wheel_directory``.
-
-        .. admonition:: Interaction with fallback
-
-            If the ``build_wheel`` hook was called in the fallback for
-            :meth:`prepare_metadata_for_build_wheel`, the build backend would
-            not be invoked. Instead, the previously built wheel will be copied
-            to ``wheel_directory`` and the name of that file will be returned.
-        """
         if metadata_directory is not None:
             metadata_directory = abspath(metadata_directory)
         return self._call_hook(
@@ -220,16 +170,6 @@
         )
 
     def get_requires_for_build_editable(self, config_settings=None):
-        """Get additional dependencies required for building an editable wheel.
-
-        :returns: A list of :pep:`dependency specifiers <508>`.
-        :rtype: list[str]
-
-        .. admonition:: Fallback
-
-            If the build backend does not defined a hook with this name, an
-            empty list will be returned.
-        """
         return self._call_hook(
             "get_requires_for_build_editable", {"config_settings": config_settings}
         )
@@ -237,19 +177,6 @@
     def prepare_metadata_for_build_editable(
         self, metadata_directory, config_settings=None, _allow_fallback=True
     ):
-        """Prepare a ``*.dist-info`` folder with metadata for this project.
-
-        :returns: Name of the newly created subfolder within
-                  ``metadata_directory``, containing the metadata.
-        :rtype: str
-
-        .. admonition:: Fallback
-
-            If the build backend does not define a hook with this name and
-            ``_allow_fallback`` is truthy, the backend will be asked to build a
-            wheel via the ``build_editable`` hook and the dist-info
-            extracted from that will be returned.
-        """
         return self._call_hook(
             "prepare_metadata_for_build_editable",
             {
@@ -262,19 +189,6 @@
     def build_editable(
         self, wheel_directory, config_settings=None, metadata_directory=None
     ):
-        """Build an editable wheel from this project.
-
-        :returns:
-            The name of the newly created wheel within ``wheel_directory``.
-
-        .. admonition:: Interaction with fallback
-
-            If the ``build_editable`` hook was called in the fallback for
-            :meth:`prepare_metadata_for_build_editable`, the build backend
-            would not be invoked. Instead, the previously built wheel will be
-            copied to ``wheel_directory`` and the name of that file will be
-            returned.
-        """
         if metadata_directory is not None:
             metadata_directory = abspath(metadata_directory)
         return self._call_hook(
@@ -287,21 +201,11 @@
         )
 
     def get_requires_for_build_sdist(self, config_settings=None):
-        """Get additional dependencies required for building an sdist.
-
-        :returns: A list of :pep:`dependency specifiers <508>`.
-        :rtype: list[str]
-        """
         return self._call_hook(
             "get_requires_for_build_sdist", {"config_settings": config_settings}
         )
 
     def build_sdist(self, sdist_directory, config_settings=None):
-        """Build an sdist from this project.
-
-        :returns:
-            The name of the newly created sdist within ``wheel_directory``.
-        """
         return self._call_hook(
             "build_sdist",
             {
@@ -321,7 +225,6 @@
             hook_input = {"kwargs": kwargs}
             write_json(hook_input, pjoin(td, "input.json"), indent=2)
 
-            # Run the hook in a subprocess
             with _in_proc_script_path() as script:
                 python = self.python_executable
                 self._subprocess_runner(
@@ -343,4 +246,4 @@
                 )
             if data.get("hook_missing"):
                 raise HookMissing(data.get("missing_hook_name") or hook_name)
-            return data["return_val"]
+            return data["return_val"]
