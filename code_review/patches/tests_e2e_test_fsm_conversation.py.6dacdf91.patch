--- a/tests/e2e/test_fsm_conversation.py
+++ b/tests/e2e/test_fsm_conversation.py
@@ -5,11 +5,6 @@
 
 import pytest
 from aiogram import Bot
-
-if TYPE_CHECKING:  # pragma: no cover - type checking only
-    from aiogram import types as aiogram_types
-else:
-    aiogram_types = importlib.import_module("aiogram.types")
 from aiogram.enums import ChatType
 from aiogram.fsm.context import FSMContext
 from aiogram.fsm.storage.base import StorageKey
@@ -17,10 +12,17 @@
 
 from telegram_bot.handlers import IncidentStates, start_handler
 
+if TYPE_CHECKING:  # pragma: no cover - type checking only
+    from aiogram import types as aiogram_types
+else:
+    aiogram_types = importlib.import_module("aiogram.types")
 
 @pytest.mark.asyncio
 async def test_fsm_start_handler():
-    bot = Bot(token="12345:TOKEN")
+    """Test the start handler of the FSM to ensure it transitions to the correct state."""
+    
+    bot_token = "12345:TOKEN"  # Replace with a method to retrieve from environment
+    bot = Bot(token=bot_token)
     storage = MemoryStorage()
     key = StorageKey(bot_id=bot.id or 0, chat_id=123, user_id=123)
     state = FSMContext(storage=storage, key=key)
@@ -41,4 +43,4 @@
     assert await state.get_state() == IncidentStates.waiting_object.state
 
     # Clean up resources
-    await bot.session.close()
+    await bot.session.close()
