--- a/testvenv/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py
+++ b/testvenv/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py
@@ -1,15 +1,11 @@
 # common.py
 from datetime import datetime
-
 from .core import *
 from .helpers import DelimitedList, any_close_tag, any_open_tag
 
-
-# some other useful expressions - using lower-case class name since we are really using this as a namespace
 class pyparsing_common:
     """Here are some common low-level expressions that may be useful in
     jump-starting parser development:
-
     - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,
       :class:`scientific notation<sci_real>`)
     - common :class:`programming identifiers<identifier>`
@@ -20,9 +16,7 @@
     - :class:`UUID<uuid>`
     - :class:`comma-separated list<comma_separated_list>`
     - :class:`url`
-
     Parse actions:
-
     - :class:`convert_to_integer`
     - :class:`convert_to_float`
     - :class:`convert_to_date`
@@ -30,9 +24,7 @@
     - :class:`strip_html_tags`
     - :class:`upcase_tokens`
     - :class:`downcase_tokens`
-
     Example::
-
         pyparsing_common.number.run_tests('''
             # any int or real number, returned as the appropriate type
             100
@@ -42,7 +34,6 @@
             6.02e23
             1e-12
             ''')
-
         pyparsing_common.fnumber.run_tests('''
             # any int or real number, returned as float
             100
@@ -52,19 +43,16 @@
             6.02e23
             1e-12
             ''')
-
         pyparsing_common.hex_integer.run_tests('''
             # hex numbers
             100
             FF
             ''')
-
         pyparsing_common.fraction.run_tests('''
             # fractions
             1/2
             -3/4
             ''')
-
         pyparsing_common.mixed_integer.run_tests('''
             # mixed fractions
             1
@@ -72,95 +60,68 @@
             -3/4
             1-3/4
             ''')
-
         import uuid
         pyparsing_common.uuid.set_parse_action(token_map(uuid.UUID))
         pyparsing_common.uuid.run_tests('''
             # uuid
             12345678-1234-5678-1234-567812345678
             ''')
-
     prints::
-
         # any int or real number, returned as the appropriate type
         100
         [100]
-
         -100
         [-100]
-
         +100
         [100]
-
         3.14159
         [3.14159]
-
         6.02e23
         [6.02e+23]
-
         1e-12
         [1e-12]
-
         # any int or real number, returned as float
         100
         [100.0]
-
         -100
         [-100.0]
-
         +100
         [100.0]
-
         3.14159
         [3.14159]
-
         6.02e23
         [6.02e+23]
-
         1e-12
         [1e-12]
-
         # hex numbers
         100
         [256]
-
         FF
         [255]
-
         # fractions
         1/2
         [0.5]
-
         -3/4
         [-0.75]
-
         # mixed fractions
         1
         [1]
-
         1/2
         [0.5]
-
         -3/4
         [-0.75]
-
         1-3/4
         [1.75]
-
         # uuid
         12345678-1234-5678-1234-567812345678
         [UUID('12345678-1234-5678-1234-567812345678')]
     """
 
     convert_to_integer = token_map(int)
-    """
-    Parse action for converting parsed integers to Python int
-    """
+    """Parse action for converting parsed integers to Python int"""
 
     convert_to_float = token_map(float)
-    """
-    Parse action for converting parsed numbers to Python float
-    """
+    """Parse action for converting parsed numbers to Python float"""
 
     integer = Word(nums).set_name("integer").set_parse_action(convert_to_integer)
     """expression that parses an unsigned integer, returns an int"""
@@ -206,8 +167,7 @@
     """expression that parses a floating point number with optional
     scientific notation and returns a float"""
 
-    # streamlining this expression makes the docs nicer-looking
-    number = (sci_real | real | signed_integer).setName("number").streamline()
+    number = (sci_real | real | signed_integer).set_name("number").streamline()
     """any numeric expression, returns the corresponding Python type"""
 
     fnumber = (
@@ -254,18 +214,13 @@
     def convert_to_date(fmt: str = "%Y-%m-%d"):
         """
         Helper to create a parse action for converting parsed date string to Python datetime.date
-
         Params -
         - fmt - format to be passed to datetime.strptime (default= ``"%Y-%m-%d"``)
-
         Example::
-
             date_expr = pyparsing_common.iso8601_date.copy()
             date_expr.set_parse_action(pyparsing_common.convert_to_date())
             print(date_expr.parse_string("1999-12-31"))
-
         prints::
-
             [datetime.date(1999, 12, 31)]
         """
 
@@ -281,18 +236,13 @@
     def convert_to_datetime(fmt: str = "%Y-%m-%dT%H:%M:%S.%f"):
         """Helper to create a parse action for converting parsed
         datetime string to Python datetime.datetime
-
         Params -
         - fmt - format to be passed to datetime.strptime (default= ``"%Y-%m-%dT%H:%M:%S.%f"``)
-
         Example::
-
             dt_expr = pyparsing_common.iso8601_datetime.copy()
             dt_expr.set_parse_action(pyparsing_common.convert_to_datetime())
             print(dt_expr.parse_string("1999-12-31T23:59:59.999"))
-
         prints::
-
             [datetime.datetime(1999, 12, 31, 23, 59, 59, 999000)]
         """
 
@@ -322,17 +272,13 @@
     @staticmethod
     def strip_html_tags(s: str, l: int, tokens: ParseResults):
         """Parse action to remove HTML tags from web page HTML source
-
         Example::
-
             # strip HTML links from normal text
             text = '<td>More info at the <a href="https://github.com/pyparsing/pyparsing/wiki">pyparsing</a> wiki page</td>'
             td, td_end = make_html_tags("TD")
             table_text = td + SkipTo(td_end).set_parse_action(pyparsing_common.strip_html_tags)("body") + td_end
             print(table_text.parse_string(text).body)
-
         Prints::
-
             More info at the pyparsing wiki page
         """
         return pyparsing_common._html_stripper.transform_string(tokens[0])
@@ -360,34 +306,18 @@
     downcase_tokens = staticmethod(token_map(lambda t: t.lower()))
     """Parse action to convert tokens to lower case."""
 
-    # fmt: off
     url = Regex(
-        # https://mathiasbynens.be/demo/url-regex
-        # https://gist.github.com/dperini/729294
         r"(?P<url>" +
-        # protocol identifier (optional)
-        # short syntax // still required
         r"(?:(?:(?P<scheme>https?|ftp):)?\/\/)" +
-        # user:pass BasicAuth (optional)
         r"(?:(?P<auth>\S+(?::\S*)?)@)?" +
         r"(?P<host>" +
-        # IP address exclusion
-        # private & local networks
         r"(?!(?:10|127)(?:\.\d{1,3}){3})" +
         r"(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})" +
         r"(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})" +
-        # IP address dotted notation octets
-        # excludes loopback network 0.0.0.0
-        # excludes reserved space >= 224.0.0.0
-        # excludes network & broadcast addresses
-        # (first & last IP address of each class)
         r"(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])" +
         r"(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}" +
         r"(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))" +
         r"|" +
-        # host & domain names, may end with dot
-        # can be replaced by a shortest alternative
-        # (?![-_])(?:[-\w\u00a1-\uffff]{0,63}[^-_]\.)+
         r"(?:" +
         r"(?:" +
         r"[a-z0-9\u00a1-\uffff]" +
@@ -395,23 +325,16 @@
         r")?" +
         r"[a-z0-9\u00a1-\uffff]\." +
         r")+" +
-        # TLD identifier name, may end with dot
         r"(?:[a-z\u00a1-\uffff]{2,}\.?)" +
         r")" +
-        # port number (optional)
         r"(:(?P<port>\d{2,5}))?" +
-        # resource path (optional)
         r"(?P<path>\/[^?# ]*)?" +
-        # query string (optional)
         r"(\?(?P<query>[^#]*))?" +
-        # fragment (optional)
         r"(#(?P<fragment>\S*))?" +
         r")"
     ).set_name("url")
     """URL (http/https/ftp scheme)"""
-    # fmt: on
-
-    # pre-PEP8 compatibility names
+
     convertToInteger = convert_to_integer
     """Deprecated - use :class:`convert_to_integer`"""
     convertToFloat = convert_to_float
@@ -427,7 +350,6 @@
     downcaseTokens = downcase_tokens
     """Deprecated - use :class:`downcase_tokens`"""
 
-
 _builtin_exprs = [
     v for v in vars(pyparsing_common).values() if isinstance(v, ParserElement)
-]
+]
