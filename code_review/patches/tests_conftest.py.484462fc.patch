--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -1,8 +1,7 @@
-# mypy: ignore-errors
 import sys
 import types
-
 import pytest
+from typing import Any, Callable, Dict
 
 # Provide minimal aiogram stubs so tests can run without the real library
 if "aiogram" not in sys.modules:
@@ -57,11 +56,11 @@
             self._storage = storage
             self._key = key
 
-        async def set_state(self, state) -> None:
+        async def set_state(self, state: Any) -> None:
             value = getattr(state, "state", state)
             self._storage[self._key] = value
 
-        async def get_state(self):
+        async def get_state(self) -> Any:
             return self._storage.get(self._key)
 
     fsm_context.FSMContext = FSMContext
@@ -70,7 +69,7 @@
     fsm_state = types.ModuleType("aiogram.fsm.state")
 
     class State:
-        def __set_name__(self, owner, name) -> None:
+        def __set_name__(self, owner: Any, name: str) -> None:
             self.state = f"{owner.__name__}:{name}"
 
     class StatesGroup:
@@ -105,13 +104,13 @@
 
 
 class DummyLog:
-    def info(self, *a, **k):
+    def info(self, *args: Any, **kwargs: Any) -> None:
         pass
 
-    def warning(self, *a, **k):
+    def warning(self, *args: Any, **kwargs: Any) -> None:
         pass
 
-    def error(self, *a, **k):
+    def error(self, *args: Any, **kwargs: Any) -> None:
         pass
 
 
@@ -119,8 +118,8 @@
 def frappe_stub(monkeypatch, tmp_path):
     frappe = types.SimpleNamespace()
     frappe.db = types.SimpleNamespace(
-        exists=lambda *a, **k: None,
-        get_value=lambda *a, **k: None,
+        exists=lambda *args, **kwargs: None,
+        get_value=lambda *args, **kwargs: None,
     )
 
     class ValidationError(Exception):
@@ -135,7 +134,7 @@
     exc_mod.PermissionError = PermissionError
     sys.modules["frappe.exceptions"] = exc_mod
     frappe.DoesNotExistError = Exception
-    frappe.throw = lambda msg, exc=None, *a, **k: (_ for _ in ()).throw(
+    frappe.throw = lambda msg, exc=None, *args, **kwargs: (_ for _ in ()).throw(
         exc(msg) if exc else ValidationError(msg)
     )
     frappe._ = lambda s: s
@@ -144,9 +143,9 @@
     frappe.get_site_path = lambda *parts: str(tmp_path.joinpath(*parts))
     frappe.session = types.SimpleNamespace(user="test-user")
     frappe.whitelist = lambda *args, **kwargs: (lambda f: f)
-    frappe.get_doc = lambda *a, **k: None
-    frappe.get_all = lambda *a, **k: []
-    frappe.has_permission = lambda *a, **k: True
+    frappe.get_doc = lambda *args, **kwargs: None
+    frappe.get_all = lambda *args, **kwargs: []
+    frappe.has_permission = lambda *args, **kwargs: True
     sys.modules["frappe"] = frappe
     yield frappe
-    sys.modules.pop("frappe", None)
+    sys.modules.pop("frappe", None)
