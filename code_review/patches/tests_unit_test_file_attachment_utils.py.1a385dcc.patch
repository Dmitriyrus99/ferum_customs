--- a/tests/unit/test_file_attachment_utils.py
+++ b/tests/unit/test_file_attachment_utils.py
@@ -1,24 +1,20 @@
-import importlib
 import pytest
-
-def get_utils():
-    return importlib.import_module("ferum_customs.custom_logic.file_attachment_utils")
+from ferum_customs.custom_logic import file_attachment_utils
 
 def test_resolve_attachment_public(frappe_stub, tmp_path):
-    (tmp_path / "public" / "files").mkdir(parents=True, exist_ok=True)  # Ensure directory exists
-    utils = importlib.reload(get_utils())
-    path, base, name = utils._resolve_attachment_path("/files/test.txt", False)
-    assert path == (tmp_path / "public" / "files" / "test.txt").resolve()
-    assert base == (tmp_path / "public" / "files").resolve()
+    public_files_path = tmp_path / "public" / "files"
+    public_files_path.mkdir(parents=True, exist_ok=True)  # Ensure directory exists
+    path, base, name = file_attachment_utils._resolve_attachment_path("/files/test.txt", False)
+    assert path == public_files_path / "test.txt"
+    assert base == public_files_path
     assert name == "test.txt"
 
 def test_resolve_attachment_invalid_prefix(frappe_stub):
-    utils = importlib.reload(get_utils())
     with pytest.raises(frappe_stub.ValidationError):
-        utils._resolve_attachment_path("/bad/test.txt", False)
+        file_attachment_utils._resolve_attachment_path("/bad/test.txt", False)
 
 def test_resolve_attachment_traversal(frappe_stub, tmp_path):
-    (tmp_path / "public" / "files").mkdir(parents=True, exist_ok=True)  # Ensure directory exists
-    utils = importlib.reload(get_utils())
+    public_files_path = tmp_path / "public" / "files"
+    public_files_path.mkdir(parents=True, exist_ok=True)  # Ensure directory exists
     with pytest.raises(frappe_stub.PermissionError):
-        utils._resolve_attachment_path("/files/../secret.txt", False)
+        file_attachment_utils._resolve_attachment_path("/files/../secret.txt", False)
