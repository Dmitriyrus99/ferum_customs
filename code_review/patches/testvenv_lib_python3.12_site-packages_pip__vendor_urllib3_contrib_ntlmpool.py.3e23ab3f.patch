--- a/testvenv/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/ntlmpool.py
+++ b/testvenv/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/ntlmpool.py
@@ -42,13 +42,13 @@
         self.authurl = authurl
         self.rawuser = user
         user_parts = user.split("\\", 1)
+        if len(user_parts) != 2:
+            raise ValueError("User must be in DOMAIN\\username format")
         self.domain = user_parts[0].upper()
         self.user = user_parts[1]
         self.pw = pw
 
     def _new_conn(self):
-        # Performs the NTLM handshake that secures the connection. The socket
-        # must be kept open while requests are performed.
         self.num_connections += 1
         log.debug(
             "Starting NTLM HTTPS connection no. %d: https://%s%s",
@@ -63,7 +63,6 @@
 
         conn = HTTPSConnection(host=self.host, port=self.port)
 
-        # Send negotiation message
         headers[req_header] = "NTLM %s" % ntlm.create_NTLM_NEGOTIATE_MESSAGE(
             self.rawuser
         )
@@ -75,22 +74,15 @@
         log.debug("Response headers: %s", reshdr)
         log.debug("Response data: %s [...]", res.read(100))
 
-        # Remove the reference to the socket, so that it can not be closed by
-        # the response object (we want to keep the socket open)
         res.fp = None
 
-        # Server should respond with a challenge message
-        auth_header_values = reshdr[resp_header].split(", ")
-        auth_header_value = None
-        for s in auth_header_values:
-            if s[:5] == "NTLM ":
-                auth_header_value = s[5:]
+        auth_header_values = reshdr.get(resp_header, "").split(", ")
+        auth_header_value = next((s[5:] for s in auth_header_values if s.startswith("NTLM ")), None)
         if auth_header_value is None:
             raise Exception(
-                "Unexpected %s response header: %s" % (resp_header, reshdr[resp_header])
+                "Unexpected %s response header: %s" % (resp_header, reshdr.get(resp_header, ""))
             )
 
-        # Send authentication message
         ServerChallenge, NegotiateFlags = ntlm.parse_NTLM_CHALLENGE_MESSAGE(
             auth_header_value
         )
@@ -128,4 +120,4 @@
         headers["Connection"] = "Keep-Alive"
         return super(NTLMConnectionPool, self).urlopen(
             method, url, body, headers, retries, redirect, assert_same_host
-        )
+        )
