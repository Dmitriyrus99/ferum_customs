--- a/testvenv/lib/python3.12/site-packages/pip/_vendor/tenacity/after.py
+++ b/testvenv/lib/python3.12/site-packages/pip/_vendor/tenacity/after.py
@@ -1,43 +1,22 @@
-# Copyright 2016 Julien Danjou
-# Copyright 2016 Joshua Harlow
-# Copyright 2013-2014 Ray Holder
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
 import typing
+import logging  # Moved import outside of TYPE_CHECKING for runtime use
 
 from pip._vendor.tenacity import _utils
+from pip._vendor.tenacity import RetryCallState  # Import directly for runtime use
 
-if typing.TYPE_CHECKING:
-    import logging
-
-    from pip._vendor.tenacity import RetryCallState
-
-
-def after_nothing(retry_state: "RetryCallState") -> None:
+def after_nothing(retry_state: RetryCallState) -> None:  # Removed quotes for type hint
     """After call strategy that does nothing."""
-
+    pass  # Added pass to avoid empty function body
 
 def after_log(
-    logger: "logging.Logger",
+    logger: logging.Logger,  # Removed quotes for type hint
     log_level: int,
     sec_format: str = "%0.3f",
-) -> typing.Callable[["RetryCallState"], None]:
+) -> typing.Callable[[RetryCallState], None]:  # Removed quotes for type hint
     """After call strategy that logs to some logger the finished attempt."""
 
-    def log_it(retry_state: "RetryCallState") -> None:
+    def log_it(retry_state: RetryCallState) -> None:  # Removed quotes for type hint
         if retry_state.fn is None:
-            # NOTE(sileht): can't really happen, but we must please mypy
             fn_name = "<unknown>"
         else:
             fn_name = _utils.get_callback_name(retry_state.fn)
@@ -48,4 +27,4 @@
             f"this was the {_utils.to_ordinal(retry_state.attempt_number)} time calling it.",
         )
 
-    return log_it
+    return log_it
