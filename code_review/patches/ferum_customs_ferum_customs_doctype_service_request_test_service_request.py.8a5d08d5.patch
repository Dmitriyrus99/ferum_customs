--- a/ferum_customs/ferum_customs/doctype/service_request/test_service_request.py
+++ b/ferum_customs/ferum_customs/doctype/service_request/test_service_request.py
@@ -1,6 +1,6 @@
 from unittest.mock import patch
-
 import pytest
+from typing import Optional
 
 try:
     import frappe
@@ -19,23 +19,23 @@
 ACTUAL_TEST_SO_NAME = "_Test SO for SR Tests"
 
 class TestServiceRequest(FrappeTestCase):
-    test_customer_name = TEST_CUSTOMER_NAME
-    test_engineer_user_email = TEST_ENGINEER_USER_EMAIL
-    test_pm_user_email = TEST_PM_USER_EMAIL
-    test_sp_name_field = TEST_SP_NAME_FIELD
-    actual_test_sp_name = ACTUAL_TEST_SP_NAME
-    actual_test_so_name = ACTUAL_TEST_SO_NAME
+    test_customer_name: str = TEST_CUSTOMER_NAME
+    test_engineer_user_email: str = TEST_ENGINEER_USER_EMAIL
+    test_pm_user_email: str = TEST_PM_USER_EMAIL
+    test_sp_name_field: str = TEST_SP_NAME_FIELD
+    actual_test_sp_name: str = ACTUAL_TEST_SP_NAME
+    actual_test_so_name: str = ACTUAL_TEST_SO_NAME
 
-    def setUp(self):
+    def setUp(self) -> None:
         frappe.db.savepoint()
         self.current_user_for_test = frappe.session.user
         frappe.set_user(self.test_pm_user_email)
 
-    def tearDown(self):
+    def tearDown(self) -> None:
         frappe.set_user(self.current_user_for_test)
         frappe.db.rollback()
 
-    def create_service_request_doc(self, status=STATUS_OTKRYTA, submit_doc=False):
+    def create_service_request_doc(self, status: str = STATUS_OTKRYTA, submit_doc: bool = False) -> Optional[frappe.Document]:
         sr = frappe.new_doc("Service Request")
         sr.subject = "Test SR - " + frappe.generate_hash(length=5)
         sr.custom_customer = self.test_customer_name
@@ -48,16 +48,14 @@
                 sr.submit()
             except frappe.exceptions.DoesNotExistError as e:
                 if "WorkflowState" in str(e) and "Открыта" in str(e):
-                    frappe.get_doc(
-                        "Workflow State", {"workflow_state_name": "Открыта"}
-                    ).save(ignore_permissions=True)
+                    frappe.get_doc("Workflow State", {"workflow_state_name": "Открыта"}).save(ignore_permissions=True)
                     sr.reload()
                     sr.submit()
                 else:
                     raise
         return sr
 
-    def test_sr_creation_and_custom_fields(self, frappe_site):
+    def test_sr_creation_and_custom_fields(self, frappe_site) -> None:
         sr = self.create_service_request_doc()
         self.assertEqual(sr.custom_customer, self.test_customer_name)
         self.assertEqual(sr.custom_service_object_link, self.actual_test_so_name)
@@ -65,40 +63,31 @@
         fetched_sr = frappe.get_doc("Service Request", sr.name)
         self.assertEqual(fetched_sr.custom_project, self.actual_test_sp_name)
 
-    def test_validate_vyapolnena_requires_linked_report(self, frappe_site):
+    def test_validate_vyapolnena_requires_linked_report(self, frappe_site) -> None:
         sr = self.create_service_request_doc(status=STATUS_OTKRYTA, submit_doc=True)
         sr.status = STATUS_VYPOLNENA
 
-        with self.assertRaisesRegex(
-            frappe.ValidationError,
-            "Нельзя отметить заявку выполненной без связанного отчёта",
-        ):
+        with self.assertRaisesRegex(frappe.ValidationError, "Нельзя отметить заявку выполненной без связанного отчёта"):
             sr.save()
 
-    def test_hook_get_engineers_for_object(self, frappe_site):
-        from ferum_customs.custom_logic.service_request_hooks import (
-            get_engineers_for_object,
-        )
+    def test_hook_get_engineers_for_object(self, frappe_site) -> None:
+        from ferum_customs.custom_logic.service_request_hooks import get_engineers_for_object
 
         engineers = get_engineers_for_object(self.actual_test_so_name)
         self.assertIn(self.test_engineer_user_email, engineers)
 
-    def test_sr_controller_internal_methods_with_custom_fields(self, frappe_site):
+    def test_sr_controller_internal_methods_with_custom_fields(self, frappe_site) -> None:
         sr_doc = frappe.new_doc("Service Request")
         sr_doc.subject = " Test Subject for Cleaning "
         sr_doc.planned_start_datetime = now_datetime()
         sr_doc.planned_end_datetime = add_days(now_datetime(), -1)
 
-        with self.assertRaisesRegex(
-            frappe.ValidationError, "Планируемая дата начала не может быть позже"
-        ):
+        with self.assertRaisesRegex(frappe.ValidationError, "Планируемая дата начала не может быть позже"):
             sr_doc.validate()
 
         sr_doc.planned_end_datetime = add_days(now_datetime(), 1)
         sr_doc.actual_start_datetime = now_datetime()
-        sr_doc.actual_end_datetime = add_days(
-            sr_doc.actual_start_datetime, 0.5
-        )
+        sr_doc.actual_end_datetime = add_days(sr_doc.actual_start_datetime, 0.5)
 
         sr_doc.validate()
         sr_doc.run_method("before_save")
@@ -107,7 +96,7 @@
         self.assertAlmostEqual(sr_doc.duration_hours, 12.0, places=2)
 
     @patch("frappe.sendmail")
-    def test_notify_project_manager_on_close(self, mock_sendmail_func, frappe_site):
+    def test_notify_project_manager_on_close(self, mock_sendmail_func, frappe_site) -> None:
         sr = self.create_service_request_doc(status=STATUS_OTKRYTA, submit_doc=True)
 
         sr.reload()
@@ -122,4 +111,4 @@
         self.assertEqual(kwargs.get("reference_doctype"), "Service Request")
         self.assertEqual(kwargs.get("reference_name"), sr.name)
         if sr.custom_customer:
-            self.assertIn(self.test_customer_name, kwargs.get("message"))
+            self.assertIn(self.test_customer_name, kwargs.get("message"))
