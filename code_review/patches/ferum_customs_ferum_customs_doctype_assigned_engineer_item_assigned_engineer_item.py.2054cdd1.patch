--- a/ferum_customs/ferum_customs/doctype/assigned_engineer_item/assigned_engineer_item.py
+++ b/ferum_customs/ferum_customs/doctype/assigned_engineer_item/assigned_engineer_item.py
@@ -1,51 +1,48 @@
 # ferum_customs/ferum_customs/doctype/assigned_engineer_item/assigned_engineer_item.py
 """
-Python-контроллер для дочернего DocType "Assigned Engineer Item".
-Этот DocType используется как таблица в другом документе (например, Service Object).
+Python controller for the child DocType "Assigned Engineer Item".
+This DocType is used as a table in another document (e.g., Service Object).
 """
 
 from __future__ import annotations
 
 import datetime
-from typing import TYPE_CHECKING, Optional
+from typing import Optional
 
 import frappe
 from frappe.model.document import Document
 
-if TYPE_CHECKING:
-    pass
-
-
 class AssignedEngineerItem(Document):
     """
-    Класс документа (дочерней таблицы) AssignedEngineerItem.
+    Document class for the AssignedEngineerItem child table.
     """
 
-    engineer: Optional[str]
-    assignment_date: Optional[str]
+    engineer: Optional[str] = None
+    assignment_date: Optional[str] = None
 
     def validate(self) -> None:
         """
-        Валидация данных для строки дочерней таблицы.
+        Validate data for the child table row.
         """
+        super().validate()  # Ensure parent validation is called
         self._clean_engineer_field()
         self._format_assignment_date()
 
     def _clean_engineer_field(self) -> None:
         """
-        Очищает поле инженера.
+        Cleans the engineer field.
         """
         if self.engineer and isinstance(self.engineer, str):
             original_value = self.engineer
             self.engineer = self.engineer.strip()
             if self.engineer != original_value:
-                frappe.logger(__name__).debug(
+                frappe.log(__name__).debug(
                     f"Stripped whitespace from 'engineer' field in AssignedEngineerItem (parent: {self.parent}), original: '{original_value}', new: '{self.engineer}'"
                 )
 
     def _format_assignment_date(self) -> None:
         """
-        Форматирует дату назначения в ISO формат.
+        Formats the assignment date to ISO format.
         """
         assignment_date_val = self.get("assignment_date")
         if assignment_date_val:
@@ -56,6 +53,6 @@
                     dt_obj = frappe.utils.get_datetime(assignment_date_val)
                     self.assignment_date = dt_obj.isoformat()
                 except (ValueError, TypeError):
-                    frappe.logger(__name__).warning(
+                    frappe.log(__name__).warning(
                         f"Could not parse or re-format 'assignment_date' string '{assignment_date_val}' in AssignedEngineerItem (parent: {self.parent})."
-                    )
+                    )
