--- a/ferum_customs/custom_logic/service_request_hooks.py
+++ b/ferum_customs/custom_logic/service_request_hooks.py
@@ -1,5 +1,5 @@
 # ferum_customs/ferum_customs/custom_logic/service_request_hooks.py
-"""Хуки для DocType *Service Request*."""
+"""Hooks for DocType *Service Request*."""
 
 from __future__ import annotations
 
@@ -21,7 +21,6 @@
 
 if TYPE_CHECKING:
     from frappe.model.document import Document as FrappeDocument
-
     from ferum_customs.ferum_customs.doctype.service_request.service_request import (
         ServiceRequest,
     )
@@ -35,7 +34,7 @@
 def validate(doc: ServiceRequest, method: Optional[str] = None) -> None:
     """Validate ``Service Request`` before saving."""
     if doc.status == STATUS_VYPОЛНЕНА and not doc.get(FIELD_CUSTOM_LINKED_REPORT):
-        frappe.throw(_("Нельзя отметить заявку выполненной без связанного отчёта."))
+        frappe.throw(_("Cannot mark the request as completed without a linked report."))
 
     if doc.status == STATUS_VYPОЛНЕНА and not doc.get("completed_on"):
         doc.completed_on = now()
@@ -44,18 +43,18 @@
 
 
 def on_update_after_submit(doc: ServiceRequest, method: Optional[str] = None) -> None:
-    """Вызывается после обновления отправленного документа."""
+    """Triggered after updating a submitted document."""
     if doc.status == STATUS_ZAKRYTA:
         _notify_project_manager(doc)
 
 
 def prevent_deletion_with_links(doc: ServiceRequest, method: Optional[str] = None) -> None:
-    """Запрещает удаление заявки, если на нее есть ссылки."""
+    """Prevents deletion of the request if there are links to it."""
     if linked_report := frappe.db.exists(
         "Service Report", {"service_request": doc.name}
     ):
         frappe.throw(
-            _("Нельзя удалить заявку {0}, так как на нее ссылается отчет {1}.").format(
+            _("Cannot delete request {0} as it is referenced by report {1}.").format(
                 doc.name, linked_report
             )
         )
@@ -73,7 +72,7 @@
             doc.custom_customer = customer
         else:
             frappe.throw(
-                _("У выбранного проекта ({0}) отсутствует связанный клиент.").format(
+                _("The selected project ({0}) has no associated customer.").format(
                     project
                 )
             )
@@ -93,7 +92,7 @@
 
 @frappe.whitelist(allow_guest=False)
 def get_engineers_for_object(service_object_name: str) -> List[str]:
-    """Возвращает список инженеров, назначенных на объект обслуживания."""
+    """Returns a list of engineers assigned to the service object."""
     if not service_object_name:
         return []
 
@@ -109,24 +108,24 @@
         )
     except frappe.DoesNotExistError:
         frappe.logger(__name__).info(
-            f"Объект '{service_object_name}' не найден при поиске инженеров."
+            f"Object '{service_object_name}' not found while searching for engineers."
         )
         return []
     except Exception as e:
         frappe.logger(__name__).error(
-            f"Ошибка при получении инженеров для объекта '{service_object_name}': {e}",
+            f"Error retrieving engineers for object '{service_object_name}': {e}",
             exc_info=True,
         )
         return []
 
 
 # --------------------------------------------------------------------------- #
-#                               Вспомогательное                               #
+#                               Helper Functions                             #
 # --------------------------------------------------------------------------- #
 
 
 def _notify_project_manager(doc: ServiceRequest) -> None:
-    """Отправляет уведомление о закрытии заявки менеджерам проекта."""
+    """Sends a notification about the closure of the request to project managers."""
     try:
         recipients = frappe.get_all(
             "User",
@@ -145,13 +144,13 @@
 
         if not recipients:
             frappe.logger(__name__).warning(
-                _("Получатели с ролью '{0}' не найдены для уведомления.").format(
+                _("No recipients with role '{0}' found for notification.").format(
                     ROLE_PROEKTNYJ_MENEDZHER
                 )
             )
             return
 
-        subject = _("Заявка на обслуживание {0} закрыта").format(doc.name)
+        subject = _("Service Request {0} Closed").format(doc.name)
         customer_name = (
             frappe.get_cached_value("Customer", doc.custom_customer, "customer_name")
             if doc.custom_customer
@@ -160,17 +159,17 @@
 
         message = _(
             """
-            <p>Заявка на обслуживание <b>{doc_name}</b> была переведена в статус «Закрыта».</p>
-            <p>Тема: {subject}</p>
-            <p>Клиент: {customer}</p>
+            <p>Service request <b>{doc_name}</b> has been marked as 'Closed'.</p>
+            <p>Subject: {subject}</p>
+            <p>Customer: {customer}</p>
             <p><a href="{link}">{link_text}</a></p>
             """
         ).format(
             doc_name=doc.name,
             subject=doc.subject,
-            customer=customer_name or _("Не указан"),
+            customer=customer_name or _("Not specified"),
             link=get_link_to_form("Service Request", doc.name),
-            link_text=_("Просмотреть заявку"),
+            link_text=_("View Request"),
         )
 
         frappe.sendmail(
@@ -183,6 +182,6 @@
         )
     except Exception as e:
         frappe.logger(__name__).error(
-            f"Не удалось отправить уведомление о закрытии заявки '{doc.name}': {e}",
+            f"Failed to send closure notification for request '{doc.name}': {e}",
             exc_info=True,
-        )
+        )
