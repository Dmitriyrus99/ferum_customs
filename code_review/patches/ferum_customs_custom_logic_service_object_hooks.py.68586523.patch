--- a/ferum_customs/custom_logic/service_object_hooks.py
+++ b/ferum_customs/custom_logic/service_object_hooks.py
@@ -13,10 +13,6 @@
     from ferum_customs.ferum_customs.doctype.service_object.service_object import (
         ServiceObject,
     )
-
-# from frappe.model.document import Document # Общий тип для документов
-# ServiceObject = Document
-
 
 def validate(doc: ServiceObject, method: str | None = None) -> None:
     """
@@ -34,25 +30,18 @@
         # Удаляем возможные пробелы по краям перед проверкой
         serial_no_cleaned = doc.serial_no.strip()
         if not serial_no_cleaned:  # Если после очистки строка пустая
-            # Можно решить, считать ли это ошибкой или просто проигнорировать
-            # frappe.throw(_("Серийный номер не может состоять только из пробелов."))
+            frappe.throw(_("Серийный номер не может состоять только из пробелов."))
             return
 
         # Формируем фильтры для поиска дубликатов.
-        # Ищем Service Object с таким же serial_no, но с другим именем (doc.name).
-        # Это гарантирует, что мы не найдем сам текущий документ при его редактировании.
         filters = {
             "serial_no": serial_no_cleaned,
             "name": ["!=", doc.name],
-            # Можно добавить фильтр по компании, если серийные номера уникальны в рамках компании
-            # "company": doc.company
         }
 
-        # frappe.db.exists возвращает имя существующего документа или None
         existing_doc_name = frappe.db.exists("Service Object", filters)
 
         if existing_doc_name:
-            # Если дубликат найден, выбрасываем исключение с переводимым сообщением.
             error_message = _(
                 "Серийный номер '{0}' уже используется другим объектом обслуживания: {1}."
             ).format(serial_no_cleaned, existing_doc_name)
@@ -61,4 +50,4 @@
     # Сюда можно добавить другие проверки для ServiceObject.
     # Например, проверка связанных полей, форматов и т.д.
     # if doc.installation_date and doc.installation_date > frappe.utils.today():
-    #     frappe.throw(_("Дата установки не может быть в будущем."))
+    #     frappe.throw(_("Дата установки не может быть в будущем."))

