--- a/ferum_customs/custom_logic/service_object_hooks.py
+++ b/ferum_customs/custom_logic/service_object_hooks.py
@@ -1,64 +1,46 @@
 # ferum_customs/ferum_customs/custom_logic/service_object_hooks.py
-"""Хуки для DocType *Service Object* – оборудование / объект обслуживания."""
+"""Hooks for DocType *Service Object* – equipment / service object."""
 
 from __future__ import annotations
 
-from typing import TYPE_CHECKING
+from typing import Optional, TYPE_CHECKING
 
 import frappe
-from frappe import _  # Для перевода строк
+from frappe import _  # For translation
 
 if TYPE_CHECKING:
-    # Замените на актуальный путь к вашему DocType Service Object, если он определен.
     from ferum_customs.ferum_customs.doctype.service_object.service_object import (
         ServiceObject,
     )
 
-# from frappe.model.document import Document # Общий тип для документов
-# ServiceObject = Document
-
-
-def validate(doc: ServiceObject, method: str | None = None) -> None:
+def validate(doc: ServiceObject, method: Optional[str] = None) -> None:
     """
-    Проверяет уникальность серийного номера объекта обслуживания.
-    Эта проверка является примером бизнес-требования.
+    Checks the uniqueness of the service object's serial number.
+    This check is an example of a business requirement.
 
     Args:
-        doc: Экземпляр документа Service Object.
-        method: Имя вызвавшего метода (например, "validate").
+        doc: An instance of the Service Object document.
+        method: The name of the calling method (e.g., "validate").
 
     Raises:
-        frappe.ValidationError: Если серийный номер не уникален.
+        frappe.ValidationError: If the serial number is not unique.
     """
     if doc.get("serial_no"):
-        # Удаляем возможные пробелы по краям перед проверкой
         serial_no_cleaned = doc.serial_no.strip()
-        if not serial_no_cleaned:  # Если после очистки строка пустая
-            # Можно решить, считать ли это ошибкой или просто проигнорировать
-            # frappe.throw(_("Серийный номер не может состоять только из пробелов."))
-            return
+        if not serial_no_cleaned:
+            return  # Consider whether to throw an error for empty serial numbers
 
-        # Формируем фильтры для поиска дубликатов.
-        # Ищем Service Object с таким же serial_no, но с другим именем (doc.name).
-        # Это гарантирует, что мы не найдем сам текущий документ при его редактировании.
         filters = {
             "serial_no": serial_no_cleaned,
             "name": ["!=", doc.name],
-            # Можно добавить фильтр по компании, если серийные номера уникальны в рамках компании
-            # "company": doc.company
         }
 
-        # frappe.db.exists возвращает имя существующего документа или None
         existing_doc_name = frappe.db.exists("Service Object", filters)
 
         if existing_doc_name:
-            # Если дубликат найден, выбрасываем исключение с переводимым сообщением.
             error_message = _(
-                "Серийный номер '{0}' уже используется другим объектом обслуживания: {1}."
+                "Serial number '{0}' is already used by another service object: {1}."
             ).format(serial_no_cleaned, existing_doc_name)
-            frappe.throw(error_message, title=_("Ошибка уникальности"))
+            frappe.throw(error_message, title=_("Uniqueness Error"))
 
-    # Сюда можно добавить другие проверки для ServiceObject.
-    # Например, проверка связанных полей, форматов и т.д.
-    # if doc.installation_date and doc.installation_date > frappe.utils.today():
-    #     frappe.throw(_("Дата установки не может быть в будущем."))
+    # Additional checks for ServiceObject can be added here.
