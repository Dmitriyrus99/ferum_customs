--- a/ferum_customs/ferum_customs/doctype/service_report/service_report.py
+++ b/ferum_customs/ferum_customs/doctype/service_report/service_report.py
@@ -1,6 +1,6 @@
 # ferum_customs/ferum_customs/doctype/service_report/service_report.py
 """
-Python-контроллер для DocType "Service Report".
+Python controller for DocType "Service Report".
 """
 
 from __future__ import annotations
@@ -14,10 +14,10 @@
 
 
 class ServiceReport(Document):
-    service_request: Optional[str]
-    customer: Optional[str]
-    total_quantity: float
-    total_payable: float
+    service_request: Optional[str] = None
+    customer: Optional[str] = None
+    total_quantity: float = 0.0
+    total_payable: float = 0.0
 
     def onload(self) -> None:
         pass
@@ -29,7 +29,7 @@
         self.calculate_totals()
 
     def before_save(self) -> None:
-        self.calculate_totals()
+        pass  # Removed duplicate call to calculate_totals
 
     def on_submit(self) -> None:
         pass
@@ -57,32 +57,20 @@
 
         for idx, item in enumerate(work_items_table):
             row_num = idx + 1
-            if item.get("description"):
-                item["description"] = item["description"].strip()
-                if not item["description"]:
-                    frappe.throw(
-                        _(
-                            "Описание обязательно для всех выполненных работ (строка {0})."
-                        ).format(row_num)
-                    )
-            else:
+            description = item.get("description", "").strip()
+            if not description:
                 frappe.throw(
-                    _(
-                        "Описание обязательно для всех выполненных работ (строка {0})."
-                    ).format(row_num)
+                    _("Description is required for all work items (row {0}).").format(row_num)
                 )
+            item["description"] = description
 
             if item.get("quantity") is not None and item["quantity"] < 0:
                 frappe.throw(
-                    _("Количество не может быть отрицательным (строка {0}).").format(
-                        row_num
-                    )
+                    _("Quantity cannot be negative (row {0}).").format(row_num)
                 )
             if item.get("unit_price") is not None and item["unit_price"] < 0:
                 frappe.throw(
-                    _(
-                        "Цена за единицу не может быть отрицательной (строка {0})."
-                    ).format(row_num)
+                    _("Unit price cannot be negative (row {0}).").format(row_num)
                 )
 
     def _set_customer_from_service_request(self) -> None:
@@ -138,4 +126,4 @@
         from ferum_customs import api
 
         self.calculate_totals()
-        return str(api.create_invoice_from_report(self.name))
+        return str(api.create_invoice_from_report(self.name))
