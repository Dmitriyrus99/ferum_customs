--- a/ferum_customs/patches/create_custom_roles_and_permissions.py
+++ b/ferum_customs/patches/create_custom_roles_and_permissions.py
@@ -67,42 +67,35 @@
 
 def create_role(role_name: str) -> None:
     """Ensure that a Role with the given name exists."""
-
-    if frappe.db.exists("Role", role_name):
-        return
-
-    role = frappe.get_doc({"doctype": "Role", "role_name": role_name})
-    role.insert(ignore_permissions=True)
+    if not frappe.db.exists("Role", role_name):
+        role = frappe.get_doc({"doctype": "Role", "role_name": role_name})
+        role.insert(ignore_permissions=True)
 
 
 def create_docperm(perm: dict[str, int | str]) -> None:
     """Insert DocPerm if it is missing."""
-
     filters = {
         "parent": perm["parent"],
         "role": perm["role"],
         "permlevel": perm.get("permlevel", 0),
     }
 
-    if frappe.db.exists("DocPerm", filters):
-        return
-
-    perm_doc = frappe.get_doc(
-        {
-            **perm,
-            "doctype": "DocPerm",
-            "parenttype": "DocType",
-            "parentfield": "permissions",
-        }
-    )
-    perm_doc.insert(ignore_permissions=True)
+    if not frappe.db.exists("DocPerm", filters):
+        perm_doc = frappe.get_doc(
+            {
+                **perm,
+                "doctype": "DocPerm",
+                "parenttype": "DocType",
+                "parentfield": "permissions",
+            }
+        )
+        perm_doc.insert(ignore_permissions=True)
 
 
 def execute() -> None:
     """Create default roles and permissions for the app."""
-
     for role in ROLES:
         create_role(role)
 
     for perm in SERVICE_REQUEST_PERMS:
-        create_docperm(perm)
+        create_docperm(perm)