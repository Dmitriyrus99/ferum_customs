--- a/ferum_customs/api/__init__.py
+++ b/ferum_customs/api/__init__.py
@@ -1,4 +1,4 @@
-from typing import Any, cast
+from typing import Any, cast, Optional, List, Dict
 
 import frappe
 from fastapi import FastAPI
@@ -11,62 +11,62 @@
 
 
 @app.get("/")
-def root() -> dict[str, bool]:
+def root() -> Dict[str, bool]:
     return {"ok": True}
 
 
 @app.get("/health")
-def health() -> dict[str, str]:
+def health() -> Dict[str, str]:
     return {"status": "ok"}
 
 
-@whitelist()  # type: ignore[misc]
-def validate_service_request(docname: str) -> dict[str, Any] | None:
+@whitelist()
+def validate_service_request(docname: str) -> Optional[Dict[str, Any]]:
     """Return the service request document as a dict after permission check."""
     if not frappe.has_permission("Service Request", "read"):
         frappe.throw(_("Not permitted"), PermissionError)
 
     try:
         doc = frappe.get_doc("Service Request", docname)
-        return cast(dict[str, Any], doc.as_dict())
+        return cast(Dict[str, Any], doc.as_dict())
     except Exception:
         frappe.log_error(frappe.get_traceback(), "Error validating Service Request")
         raise
 
 
-@whitelist()  # type: ignore[misc]
+@whitelist()
 def on_submit_service_request(docname: str) -> None:
     """Hook executed when a Service Request is submitted."""
     frappe.logger(__name__).info(f"Service Request '{docname}' submitted")
 
 
-@whitelist()  # type: ignore[misc]
+@whitelist()
 def cancel_service_request(docname: str) -> None:
     """Hook executed when a Service Request is cancelled."""
     frappe.logger(__name__).info(f"Service Request '{docname}' cancelled")
 
 
-@whitelist()  # type: ignore[misc]
-def validate_service_report(docname: str) -> dict[str, Any] | None:
+@whitelist()
+def validate_service_report(docname: str) -> Optional[Dict[str, Any]]:
     """Return the service report document as a dict after permission check."""
     if not frappe.has_permission("Service Report", "read"):
         frappe.throw(_("Not permitted"), PermissionError)
 
     try:
         doc = frappe.get_doc("Service Report", docname)
-        return cast(dict[str, Any], doc.as_dict())
+        return cast(Dict[str, Any], doc.as_dict())
     except Exception:
         frappe.log_error(frappe.get_traceback(), "Error validating Service Report")
         raise
 
 
-@whitelist()  # type: ignore[misc]
+@whitelist()
 def on_submit_service_report(docname: str) -> None:
     """Hook executed when a Service Report is submitted."""
     frappe.logger(__name__).info(f"Service Report '{docname}' submitted")
 
 
-@whitelist()  # type: ignore[misc]
+@whitelist()
 def create_invoice_from_report(service_report: str) -> str:
     """Create a Sales Invoice draft from a submitted Service Report.
 
@@ -79,9 +79,7 @@
     if not service_report:
         frappe.throw(_("Service Report ID is required"))
 
-    if frappe.db.exists(
-        "Sales Invoice", {"service_report": service_report, "docstatus": ["<", 2]}
-    ):
+    if frappe.db.exists("Sales Invoice", {"service_report": service_report, "docstatus": ["<", 2]}):
         frappe.throw(_("Sales Invoice already exists for this Service Report."))
 
     sr = frappe.get_doc("Service Report", service_report)
@@ -93,52 +91,45 @@
             exc_info=True,
         )
 
-    invoice = frappe.get_doc(
-        {
-            "doctype": "Sales Invoice",
-            "customer": sr.get("customer"),
-            "service_report": service_report,
-            "items": [],
-        }
-    )
+    invoice = frappe.get_doc({
+        "doctype": "Sales Invoice",
+        "customer": sr.get("customer"),
+        "service_report": service_report,
+        "items": [],
+    })
 
     for item in sr.get("work_items", []):
-        invoice.append(
-            "items",
-            {
-                "description": item.get("description"),
-                "qty": item.get("quantity"),
-                "rate": item.get("unit_price"),
-                "amount": item.get("amount"),
-            },
-        )
+        invoice.append("items", {
+            "description": item.get("description"),
+            "qty": item.get("quantity"),
+            "rate": item.get("unit_price"),
+            "amount": item.get("amount"),
+        })
 
     invoice.insert(ignore_permissions=True)
     return cast(str, invoice.name)
 
 
-@whitelist()  # type: ignore[misc]
+@whitelist()
 def bot_create_service_request(
     subject: str,
-    customer: str | None = None,
-    description: str | None = None,
+    customer: Optional[str] = None,
+    description: Optional[str] = None,
 ) -> str:
     """Create a Service Request document on behalf of the Telegram bot."""
 
-    doc = frappe.get_doc(
-        {
-            "doctype": "Service Request",
-            "subject": subject,
-            "status": STATUS_OTKRYTA,
-            "custom_customer": customer,
-            "description": description,
-        }
-    )
+    doc = frappe.get_doc({
+        "doctype": "Service Request",
+        "subject": subject,
+        "status": STATUS_OTKRYTA,
+        "custom_customer": customer,
+        "description": description,
+    })
     doc.insert(ignore_permissions=True)
     return cast(str, doc.name)
 
 
-@whitelist()  # type: ignore[misc]
+@whitelist()
 def bot_update_service_request_status(docname: str, status: str) -> None:
     """Update the status of a Service Request from the bot."""
 
@@ -150,32 +141,30 @@
     sr.save(ignore_permissions=True)
 
 
-@whitelist()  # type: ignore[misc]
+@whitelist()
 def bot_upload_attachment(docname: str, file_url: str, attachment_type: str) -> str:
     """Create a Custom Attachment linked to a Service Request."""
 
-    ca = frappe.get_doc(
-        {
-            "doctype": "Custom Attachment",
-            "parent_reference_sr": docname,
-            "attachment_file": file_url,
-            "attachment_type": attachment_type,
-        }
-    )
+    ca = frappe.get_doc({
+        "doctype": "Custom Attachment",
+        "parent_reference_sr": docname,
+        "attachment_file": file_url,
+        "attachment_type": attachment_type,
+    })
     ca.insert(ignore_permissions=True)
     return cast(str, ca.name)
 
 
-@whitelist()  # type: ignore[misc]
-def bot_get_service_requests(status: str | None = None) -> list[dict[str, Any]]:
+@whitelist()
+def bot_get_service_requests(status: Optional[str] = None) -> List[Dict[str, Any]]:
     """Return a list of Service Requests filtered by status."""
 
     filters = {"status": status} if status else {}
     return cast(
-        list[dict[str, Any]],
+        List[Dict[str, Any]],
         frappe.get_all(
             "Service Request",
             filters=filters,
             fields=["name", "subject", "status"],
         ),
-    )
+    )