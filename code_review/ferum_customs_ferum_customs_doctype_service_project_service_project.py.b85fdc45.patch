--- a/ferum_customs/ferum_customs/doctype/service_project/service_project.py
+++ b/ferum_customs/ferum_customs/doctype/service_project/service_project.py
@@ -5,19 +5,14 @@
 
 from __future__ import annotations
 
-# from typing import TYPE_CHECKING
 import datetime  # Для работы с датами и временем
 
 import frappe
 from frappe import _
 from frappe.model.document import Document
 
-# if TYPE_CHECKING:
-# from .project_object_item import ProjectObjectItem # Для дочерней таблицы
-# pass
 
-
-class ServiceProject(Document):  # type: ignore[misc]
+class ServiceProject(Document):
     """
     Класс документа Service Project.
     """
@@ -28,17 +23,7 @@
         """
         self._validate_dates()
         self._validate_budget()
-        self._format_dates_to_iso()  # Форматируем после валидации, чтобы валидация работала с объектами дат
-
-        # Логика из оригинального файла (service_project.py):
-        # if self.start_date and self.end_date:
-        #     if self.end_date < self.start_date:
-        #         frappe.throw("Дата окончания проекта меньше даты начала.")
-        # if self.start_date:
-        #     self.start_date = self.start_date.isoformat()
-        # if self.end_date:
-        #     self.end_date = self.end_date.isoformat()
-        # Эта логика теперь в _validate_dates() и _format_dates_to_iso()
+        self._format_dates_to_iso()
 
     def _validate_dates(self) -> None:
         """
@@ -50,11 +35,6 @@
 
         if start_date_val and end_date_val:
             try:
-                # Преобразуем в объекты date/datetime для корректного сравнения
-                # Если поля типа Date, get_date() вернет date. Если Datetime, get_datetime() вернет datetime.
-                # Для простоты сравнения можно привести все к date, если время не важно.
-                # Или использовать get_datetime для обоих, если они Datetime.
-                # Предположим, что это поля Date для простоты сравнения дат.
                 start_dt = frappe.utils.get_date(start_date_val)
                 end_dt = frappe.utils.get_date(end_date_val)
 
@@ -68,12 +48,9 @@
                         )
                     )
             except Exception as e:
-                # Если даты не удалось распарсить, это может быть ошибкой ввода
                 frappe.logger(__name__).warning(
                     f"Could not validate dates for Service Project {self.name} due to parsing error: {e}"
                 )
-                # Можно выбросить ошибку, если формат дат критичен на этом этапе
-                # frappe.throw(_("Некорректный формат даты начала или окончания проекта."))
 
     def _format_dates_to_iso(self) -> None:
         """
@@ -83,19 +60,16 @@
         for fieldname in date_fields:
             field_value = self.get(fieldname)
             if field_value and not isinstance(field_value, str):
-                if isinstance(field_value, datetime.datetime | datetime.date):
+                if isinstance(field_value, (datetime.datetime, datetime.date)):
                     try:
                         setattr(self, fieldname, field_value.isoformat())
                     except Exception as e:
                         frappe.logger(__name__).error(
                             f"Error converting date field '{fieldname}' to ISO format for Service Project '{self.name}': {e}"
                         )
-                # else: уже обработано not isinstance(str)
             elif isinstance(field_value, str):
-                # Если это уже строка, можно попытаться нормализовать (если нужно).
-                # Оригинальный код делал isoformat() без проверки, что вызвало бы ошибку.
                 try:
-                    dt_obj = frappe.utils.get_datetime(field_value)  # или get_date
+                    dt_obj = frappe.utils.get_datetime(field_value)
                     setattr(
                         self,
                         fieldname,
@@ -106,16 +80,15 @@
                         ),
                     )
                 except Exception:
-                    pass  # Оставляем как есть, если не парсится или уже в нужном формате
-
-    # Другие методы могут быть добавлены по необходимости.
+                    pass
 
     def _validate_budget(self) -> None:
         """Проверяет, что бюджет неотрицательный."""
-        if self.get("budget") is not None:
+        budget_val = self.get("budget")
+        if budget_val is not None:
             try:
-                budget_val = float(self.budget)
+                budget_val = float(budget_val)
                 if budget_val < 0:
                     frappe.throw(_("Бюджет проекта не может быть отрицательным."))
             except (ValueError, TypeError):
-                frappe.throw(_("Некорректное значение бюджета проекта."))
+                frappe.throw(_("Некорректное значение бюджета проекта."))