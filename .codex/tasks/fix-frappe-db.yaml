name: Fix Frappe site DB and set admin password
description: >
  Автоматически проверяет наличие базы данных для Frappe-сайта, создаёт её при необходимости,
  выдаёт права, и задаёт новый пароль для администратора.
language: bash
steps:

  - name: Определение имени БД и пароля
    run: |
      set -e
      # Используем SITE_NAME из переменной окружения, если она установлена, иначе дефолт
      export SITE_NAME="${SITE_NAME:-erp.ferumrus.ru}"

      # Проверяем, существует ли site_config.json.
      if [ -f "sites/$SITE_NAME/site_config.json" ]; then
        echo "Обнаружен site_config.json для $SITE_NAME. Извлечение имени БД и пароля..."
        export DB_NAME=$(jq -r '.db_name' sites/$SITE_NAME/site_config.json)
        export DB_PASSWORD=$(jq -r '.db_password' sites/$SITE_NAME/site_config.json)
      else
        echo "site_config.json для $SITE_NAME не найден. Предполагаем имя БД по умолчанию."
        export DB_NAME=$(echo "$SITE_NAME" | sed 's/\./_/g')
        export DB_PASSWORD="${ADMIN_PASSWORD}"
      fi

      # Передаём переменные окружения для последующих шагов
      echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
      echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
      echo "Используемое имя БД: $DB_NAME"

  - name: Подключение к MariaDB и создание базы и пользователя (если не существует)
    run: |
      set -e
      docker compose exec -T db \
        mariadb -uroot -p"$DB_ROOT_PASSWORD" <<EOF
      CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;
      CREATE USER IF NOT EXISTS '$DB_NAME'@'%' IDENTIFIED BY '$DB_PASSWORD';
      GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_NAME'@'%';
      FLUSH PRIVILEGES;
      EOF
    env:
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}

  - name: Проверка доступности БД из контейнера Frappe
    run: |
      set -e
      docker compose exec frappe bash -c \
        "mysql -h db -u$DB_NAME -p$DB_PASSWORD -e 'SHOW DATABASES LIKE \"$DB_NAME\";'"

  - name: Установка нового пароля администратора
    run: |
      set -e
      docker compose exec frappe bash -c \
        "bench --site $SITE_NAME set-admin-password '$ADMIN_PASSWORD'"
    env:
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
