import time
import typing
import threading  # Import threading directly since it's used in the class

def sleep(seconds: float) -> None:
    """
    Sleep strategy that delays execution for a given number of seconds.

    This is the default strategy, and may be mocked out for unit testing.
    """
    if seconds < 0:
        raise ValueError("sleep duration must be non-negative")
    time.sleep(seconds)

class sleep_using_event:
    """Sleep strategy that waits on an event to be set."""

    def __init__(self, event: threading.Event) -> None:  # Use direct import
        self.event = event

    def __call__(self, timeout: typing.Optional[float]) -> None:
        if timeout is not None and timeout < 0:
            raise ValueError("timeout must be non-negative")
        self.event.wait(timeout=timeout)
