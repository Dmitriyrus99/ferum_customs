import typing
import logging  # Moved import outside of TYPE_CHECKING for runtime use

from pip._vendor.tenacity import _utils
from pip._vendor.tenacity import RetryCallState  # Import directly for runtime use

def after_nothing(retry_state: RetryCallState) -> None:  # Removed quotes for type hint
    """After call strategy that does nothing."""
    pass  # Added pass to avoid empty function body

def after_log(
    logger: logging.Logger,  # Removed quotes for type hint
    log_level: int,
    sec_format: str = "%0.3f",
) -> typing.Callable[[RetryCallState], None]:  # Removed quotes for type hint
    """After call strategy that logs to some logger the finished attempt."""

    def log_it(retry_state: RetryCallState) -> None:  # Removed quotes for type hint
        if retry_state.fn is None:
            fn_name = "<unknown>"
        else:
            fn_name = _utils.get_callback_name(retry_state.fn)
        logger.log(
            log_level,
            f"Finished call to '{fn_name}' "
            f"after {sec_format % retry_state.seconds_since_start}(s), "
            f"this was the {_utils.to_ordinal(retry_state.attempt_number)} time calling it.",
        )

    return log_it
