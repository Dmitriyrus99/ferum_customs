import typing
import logging  # Moved import outside of TYPE_CHECKING for runtime use

from pip._vendor.tenacity import _utils
from pip._vendor.tenacity import RetryCallState  # Import directly for type checking

def before_nothing(retry_state: RetryCallState) -> None:  # Use direct type reference
    """Before call strategy that does nothing."""
    pass  # Add pass to avoid empty function body

def before_log(
    logger: logging.Logger, log_level: int
) -> typing.Callable[[RetryCallState], None]:  # Use direct type reference
    """Before call strategy that logs to some logger the attempt."""

    def log_it(retry_state: RetryCallState) -> None:  # Use direct type reference
        if retry_state.fn is None:
            fn_name = "<unknown>"
        else:
            fn_name = _utils.get_callback_name(retry_state.fn)
        logger.log(
            log_level,
            f"Starting call to '{fn_name}', "
            f"this is the {_utils.to_ordinal(retry_state.attempt_number)} time calling it.",
        )

    return log_it
